<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Objective-C | Hank 學習筆記]]></title>
  <link href="http://bcswlmpke.github.com/blog/categories/objective-c/atom.xml" rel="self"/>
  <link href="http://bcswlmpke.github.com/"/>
  <updated>2012-04-04T22:02:08+08:00</updated>
  <id>http://bcswlmpke.github.com/</id>
  <author>
    <name><![CDATA[陳彥任]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[不要相信retainCount，事實上你該怎麼做？]]></title>
    <link href="http://bcswlmpke.github.com/blog/2012/02/03/objective-c-memory-management/"/>
    <updated>2012-02-03T21:29:00+08:00</updated>
    <id>http://bcswlmpke.github.com/blog/2012/02/03/objective-c-memory-management</id>
    <content type="html"><![CDATA[<p>在還沒有擁抱 iOS 5 ARC (Automatic Reference Counting) 之前，
我們必須自己管理程式所使用的記憶體，
在開發 iOS 的過程中踩過不少地雷，
整理出一些心得用來提醒自己，
如果有錯誤也請大家幫忙指正或留言一起討論！</p>

<ul>
<li><strong>產生物件者，記得做對應的 release</strong>

<ul>
<li>new (alloc + init)</li>
<li>retain</li>
<li>copy</li>
</ul>
</li>
<li><strong>addSubView 會將 retainCount +1，有兩種處理的時機</strong>
<code>objc
  UILabel *label = [UILabel alloc] initWithFrame:self.bounds];
  [self addSubView:label];
  [label release];
</code>
```objc
  @implementation MyClass

<pre><code>  - (void)dealloc 
  {
      if (label != nil)
      {
          if (label.superview != nil)
              [label removeFromSuperview];
          [label release];
          label = nil;
      }
      [super dealloc];
  }
</code></pre>

<p>  @end
```</p></li>
<li><strong>Layer 的 Animation 或 setFrame 會暫時的增加 retainCount，直到動作完成</strong></li>
<li><strong>如果你要使用 Thread，請記得用 Autorelease Pool 幫 Thread 做記憶體管理</strong></li>
<li><strong>如果實作的類別要用 Delegate 時，Property 請記得用 assgin，如果用 retain 會造成 Circular Reference</strong>
```objc
  @interface MyClass
  {

<pre><code>id target;
</code></pre>

<p>  }
  @property (nonatomic, assgin) id target;
  @end
```</p></li>
<li><strong>如果 Property 的屬性使用 retain，要記得 release 並設成 nil</strong>
```objc
  @interface MyClass
  {

<pre><code>NSString *name;
</code></pre>

  }
  @property (nonatomic, retain) NSString *name;
  @end
  @implementation MyClass

<ul>
<li><p>(void)dealloc
{
self.name = nil; // 等同於 [name release]; name = nil;</p>

<p>[super dealloc];
}
@end
```</p>

<blockquote><p>更詳細的說明可以參考官方文件：<a href="https://developer.apple.com/library/mac/#documentation/Cocoa/Conceptual/MemoryMgmt/Articles/MemoryMgmt.html" title="About Memory Management">About Memory Management</a></p></blockquote></li>
</ul>
</li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[About Objective-C Declared Properties Feature]]></title>
    <link href="http://bcswlmpke.github.com/blog/2012/02/01/objective-c-declared-properties-feature/"/>
    <updated>2012-02-01T21:54:00+08:00</updated>
    <id>http://bcswlmpke.github.com/blog/2012/02/01/objective-c-declared-properties-feature</id>
    <content type="html"><![CDATA[<p>剛開始接觸 iOS 應用程式開發時，
曾經對 @synthesize window = _window 所表達的意義有疑問，
查過資料卻沒記下來，
今天剛好同事問到，
所以這次一定要做一下筆記。</p>

<ul>
<li><strong>Property Declaratoin</strong>
```objc

<pre><code>@property (attributes) type name;

@interface MyClass : NSObject
@property float value;
@end
</code></pre>

<code>
@property float value; 相等於
</code>objc

<pre><code>- (float)value;
- (void)setValue:(float)newValue;
</code></pre>

<code>
而 property 的宣告也可以放在 class extensions (也就是 anonymous categories)
</code>objc

<pre><code>@interface MyClass : NSObject
@property (retain, readonly) float value;
@end

@interface MyClass() // Private extension
@property (retain, readwrite) float value;
@end
</code></pre>

<p>```</p></li>
<li><strong>Property Declaratoin Attributes</strong>
```objc

<pre><code>@property (attribute, [, attribute2, ...])
</code></pre>

<p>```</p></li>
<li><strong>Accessor Method Names</strong>
```objc

<pre><code>getter=getterName
setter=setterName
</code></pre>

<p>```</p></li>
<li><strong>Writability</strong>

<ul>
<li>readwrite</li>
<li>readonly</li>
</ul>
</li>
<li><strong>Setter Semantics</strong>

<ul>
<li>strong</li>
<li>weak (OS X v10.6 and iOS 4 not support)</li>
<li>copy</li>
<li>assign (Default)</li>
<li>retain</li>
</ul>
</li>
<li><strong>Atomicity</strong>

<ul>
<li>nonatomic</li>
<li>atomic (Default)</li>
</ul>
</li>
<li><strong>Property Implementation Directives</strong></li>
</ul>


<p>用 property=ivar 可以指定特別的 instance variable 來讓 property 使用。
不指定的情況如下，@synthesize value; 其實等同於 @synthesize value = value;
```objc</p>

<pre><code>  @interface MyClass : NSObject
  @property (copy, readwrite) NSString *value;
  @end

  @implementation MyClass
  @synthesize value;
  @end
</code></pre>

<p><code>
有指定的情況如下：
</code>objc</p>

<pre><code>  @implementation MyClass
  @synthesize firstName, lastName, age=yearsOld;
  @end
</code></pre>

<p>```
age 是用 yearsOld 這個 instance variable 來表示。
所以在 MyClass 內部使用時，可以用 yearsOld 來進行操作，
而其它類別如果使用 MyClass，則可以用 age 這個 property 來進行操作。</p>

<blockquote><p>如果要看更詳細的說明，可以參考官方文件<a href="http://developer.apple.com/library/mac/#documentation/Cocoa/Conceptual/ObjectiveC/Chapters/ocProperties.html" title="ocProperties">Declared Properties</a></p></blockquote>
]]></content>
  </entry>
  
</feed>
