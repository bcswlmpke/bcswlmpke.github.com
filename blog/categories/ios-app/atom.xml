<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: iOS App | Hank 學習筆記]]></title>
  <link href="http://bcswlmpke.github.com/blog/categories/ios-app/atom.xml" rel="self"/>
  <link href="http://bcswlmpke.github.com/"/>
  <updated>2012-05-01T21:36:31+08:00</updated>
  <id>http://bcswlmpke.github.com/</id>
  <author>
    <name><![CDATA[陳彥任]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[將專案轉換為ARC]]></title>
    <link href="http://bcswlmpke.github.com/blog/2012/05/01/convert-to-arc/"/>
    <updated>2012-05-01T20:28:00+08:00</updated>
    <id>http://bcswlmpke.github.com/blog/2012/05/01/convert-to-arc</id>
    <content type="html"><![CDATA[<h3>Automatic Reference Counting</h3>

<ul>
<li>ARC

<ul>
<li>XCode 4.2 開始支援</li>
<li>Preferences > General > enable Continue building after errors</li>
<li>Edit > Refactor > Convert to Objective-C ARC</li>
<li>using the Apple LLVM compiler</li>
<li>如果轉換失敗，會提供錯誤訊息，等手動修正後，就可以重新啟動 Refactor ARC-conversion workflow
<img src="http://farm8.staticflickr.com/7238/7131702787_9e4cdfcfe1_z.jpg" title="Convert to ARC dialog" alt="Convert to ARC dialog" /></li>
<li>轉換成功後，你可以 review automatic changes，也可以做 snapshot 供之後回復(如果有需要)，然後選擇 Save

<h3>將手上的專案轉成 ARC 的一些心得整理</h3></li>
<li>不想要轉換為 ARC 的 source file 可加上 <code>-fno-objc-arc</code></li>
<li>不需要自己加上 <code>retain</code>、<code>autorelease</code>、<code>release</code>、<code>[super dealloc]</code></li>
<li>Objects in the struct are unretained
<code>objc
typedef struct {
__unsafe_unretained NSString *name;
} MyStruct;
</code></li>
<li>關於 weak
<code>objc
Becase of 「__weak」 references only work on iOS 5 and above.
If you have the deployment target set to anything earlier, then you'll get the error.
Basically, if you want to deploy to earlier devices you can't use automated 「__weak」 references.
The substitute would be 「__unsafe_unretained」.
</code></li>
<li>NSAutoreleasePool 要修改如下
<code>objc
[Before]
NSAutoreleasePool * pool = [[NSAutoreleasePool alloc] init];
[pool drain];
[After]
@autoreleasepool {
}
</code></li>
<li>cast of C pointer type 'void <em>' to Objective-C pointer type 'NSObject </em>' requires a bridged cast <code><strong>bridge</code>
```objc
NSObject<em> myObject = [[NSObject alloc] init];
void</em> myObjectPointer = (</strong>bridge void*)myObject;</li>
</ul>


<p>void<em> myObjectPointer2 = NULL;
NSObject</em> myObject2 = (__bridge NSObject*)myObjectPointer2;
```</p>

<ul>
<li>assign retained object to unsafe_unretained variable, object will be released after assignment
<code>objc
請在 @property 加上 strong
或是在變數名稱前加上 __strong
</code></li>
<li>發生 leaking 怎麼辦？
<code>objc
如果發生類似 *** __NSAutoreleaseNoPool(): Object 0x648ad80 of class NSCFString autoreleased with no pool in place - just leaking 的訊息，
可以透過 Profile -&gt; Leak Tool 找出有問題的地方
</code></li>
<li><p>如果是 static method 回傳一個物件，要怎麼釋放？(以 C 所產生的物件為例)
```objc
CFUUIDRef theUUID = CFUUIDCreate(NULL);
CFStringRef strUUID = CFUUIDCreateString(NULL, theUUID);
CFRelease(theUUID);</p>

<p>return (__bridge_transfer NSString *)strUUID; // 釋放原先所有權，將所有權交給 ARC
```</p></li>
<li>id array member instance under ARC
<code>objc
id&lt;ITest&gt; __strong *iArray = nil;
iArray = (id&lt;ITest&gt; __strong *)calloc(sizeof(id&lt;ITest&gt;), Size);
</code>

<h3>一些不錯的參考連結</h3></li>
<li>Property declarations
<code>objc
「assign」 implies 「__unsafe_unretained」ownership.
「copy」 implies 「__strong」 ownership, as well as the usual behavior of copy semantics on the setter.
「retain」 implies 「__strong」 ownership.
「strong」 implies 「__strong」 ownership.
「unsafe_unretained」 implies 「__unsafe_unretained」 ownership.
weak implies __weak ownership.
</code></li>
<li>Bridged casts
```objc
A bridged cast is a C-style cast annotated with one of three keywords:</li>
</ul>
</li>
</ul>


<p>(<strong>bridge T) op casts the operand to the destination type T. If T is a retainable object pointer type, then op must have a non-retainable pointer type. If T is a non-retainable pointer type, then op must have a retainable object pointer type. Otherwise the cast is ill-formed. There is no transfer of ownership, and ARC inserts no retain operations.
(</strong>bridge_retained T) op casts the operand, which must have retainable object pointer type, to the destination type, which must be a non-retainable pointer type. ARC retains the value, subject to the usual optimizations on local values, and the recipient is responsible for balancing that +1.
(__bridge_transfer T) op casts the operand, which must have non-retainable pointer type, to the destination type, which must be a retainable object pointer type. ARC will release the value at the end of the enclosing full-expression, subject to the usual optimizations on local values.</p>

<p>Using a <strong>bridge_retained or </strong>bridge_transfer cast purely to convince ARC to emit an unbalanced retain or release, respectively, is poor form.
```
  - <a href="http://clang.llvm.org/docs/AutomaticReferenceCounting.html" title="Automatic Reference Counting">Automatic Reference Counting</a>
  - <a href="http://developer.apple.com/library/ios/#releasenotes/ObjectiveC/RN-TransitioningToARC/Introduction/Introduction.html#//apple_ref/doc/uid/TP40011226" title="Transitioning to ARC Release Notes">Transitioning to ARC Release Notes</a>
  - <a href="http://www.mikeash.com/pyblog/friday-qa-2011-09-30-automatic-reference-counting.html" title="Q&amp;A 2011-09-30: Automatic Reference Counting">Q&amp;A 2011-09-30: Automatic Reference Counting</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[不要相信retainCount，事實上你該怎麼做？]]></title>
    <link href="http://bcswlmpke.github.com/blog/2012/02/03/objective-c-memory-management/"/>
    <updated>2012-02-03T21:29:00+08:00</updated>
    <id>http://bcswlmpke.github.com/blog/2012/02/03/objective-c-memory-management</id>
    <content type="html"><![CDATA[<p>在還沒有擁抱 iOS 5 ARC (Automatic Reference Counting) 之前，
我們必須自己管理程式所使用的記憶體，
在開發 iOS 的過程中踩過不少地雷，
整理出一些心得用來提醒自己，
如果有錯誤也請大家幫忙指正或留言一起討論！</p>

<ul>
<li><strong>產生物件者，記得做對應的 release</strong>

<ul>
<li>new (alloc + init)</li>
<li>retain</li>
<li>copy</li>
</ul>
</li>
<li><strong>addSubView 會將 retainCount +1，有兩種處理的時機</strong>
<code>objc
  UILabel *label = [UILabel alloc] initWithFrame:self.bounds];
  [self addSubView:label];
  [label release];
</code>
```objc
  @implementation MyClass

<pre><code>  - (void)dealloc 
  {
      if (label != nil)
      {
          if (label.superview != nil)
              [label removeFromSuperview];
          [label release];
          label = nil;
      }
      [super dealloc];
  }
</code></pre>

<p>  @end
```</p></li>
<li><strong>Layer 的 Animation 或 setFrame 會暫時的增加 retainCount，直到動作完成</strong></li>
<li><strong>如果你要使用 Thread，請記得用 Autorelease Pool 幫 Thread 做記憶體管理</strong></li>
<li><strong>如果實作的類別要用 Delegate 時，Property 請記得用 assgin，如果用 retain 會造成 Circular Reference</strong>
```objc
  @interface MyClass
  {

<pre><code>id target;
</code></pre>

<p>  }
  @property (nonatomic, assgin) id target;
  @end
```</p></li>
<li><strong>如果 Property 的屬性使用 retain，要記得 release 並設成 nil</strong>
```objc
  @interface MyClass
  {

<pre><code>NSString *name;
</code></pre>

  }
  @property (nonatomic, retain) NSString *name;
  @end
  @implementation MyClass

<ul>
<li><p>(void)dealloc
{
self.name = nil; // 等同於 [name release]; name = nil;</p>

<p>[super dealloc];
}
@end
```</p>

<blockquote><p>更詳細的說明可以參考官方文件：<a href="https://developer.apple.com/library/mac/#documentation/Cocoa/Conceptual/MemoryMgmt/Articles/MemoryMgmt.html" title="About Memory Management">About Memory Management</a></p></blockquote></li>
</ul>
</li>
</ul>

]]></content>
  </entry>
  
</feed>
