<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Hank學習筆記]]></title>
  <link href="http://bcswlmpke.github.io/atom.xml" rel="self"/>
  <link href="http://bcswlmpke.github.io/"/>
  <updated>2013-07-16T21:56:57+08:00</updated>
  <id>http://bcswlmpke.github.io/</id>
  <author>
    <name><![CDATA[Hank Chen]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[(iOS)url encode / decode]]></title>
    <link href="http://bcswlmpke.github.io/blog/2013/07/16/ios-urlencode/"/>
    <updated>2013-07-16T21:51:00+08:00</updated>
    <id>http://bcswlmpke.github.io/blog/2013/07/16/ios-urlencode</id>
    <content type="html"><![CDATA[<p>網址含有中文時，要將網址先編碼。收到的時候再對應解碼即可。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="sr">//</span> <span class="err">編碼</span>
</span><span class='line'><span class="o">-</span> <span class="p">(</span><span class="no">NSString</span> <span class="o">*</span><span class="p">)</span><span class="n">stringByAddingPercentEscapesUsingEncoding</span><span class="p">:(</span><span class="no">NSStringEncoding</span><span class="p">)</span><span class="n">enc</span><span class="p">;</span><span class="sr"></span>
</span><span class='line'><span class="sr">// 解碼</span>
</span><span class='line'><span class="sr">- (NSString *)stringByReplacingPercentEscapesUsingEncoding:(NSStringEncoding)enc;</span>
</span></code></pre></td></tr></table></div></figure>


<p>NSStringEncoding 有很多類型，例如常用的：<code>NSUTF8StringEncoding</code>, <code>NSASCIIStringEncoding</code>, &#8230;等。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Python版本管理工具]]></title>
    <link href="http://bcswlmpke.github.io/blog/2013/07/13/pythonbrew/"/>
    <updated>2013-07-13T23:13:00+08:00</updated>
    <id>http://bcswlmpke.github.io/blog/2013/07/13/pythonbrew</id>
    <content type="html"><![CDATA[<p>最近開始看 Python，首先就想要找一個類似 Ruby RVM 的工具，
一開始是看<a href="http://tech.mozilla.com.tw/posts/2155/python-%E9%96%8B%E7%99%BC%E5%A5%BD%E5%B9%AB%E6%89%8B-virtualenv" title="virtualenv">virtualenv</a>，
但後來找到了 <a href="https://github.com/utahta/pythonbrew" title="pythonbrew">pythonbrew</a>，
這是一個 Python Environment Manager。</p>

<p>安裝方式如下：
<code>curl -kL http://xrl.us/pythonbrewinstall | bash</code></p>

<p>.bashrc 加入：
<code>[[ -s $HOME/.pythonbrew/etc/bashrc ]] &amp;&amp; source $HOME/.pythonbrew/etc/bashrc</code></p>

<ul>
<li>常用的操作如下：

<ul>
<li>顯示目前的 pythonbrew 版本 <code>pythonbrew version</code></li>
<li>更新 pythonbrew 至最新版本 <code>pythonbrew update</code></li>
<li>列出所有可安裝的 python 版本 <code>pythonbrew list -k</code></li>
<li>列出目前已安裝的 python 版本 <code>pythonbrew list</code></li>
<li>安裝指定的 python 版本 <code>pythonbrew install 3.2.3</code></li>
<li>移除指定的 python 版本 <code>pythonbrew uninstall 2.7.2 3.2.3</code></li>
<li>在目前 shell 使用某個指定的 python 版本 <code>pythonbrew use 3.2.3</code></li>
<li>永久切換至某個指定的 python 版本 <code>pythonbrew switch 3.2.3</code></li>
<li>切回系統的 python 環境 <code>pythonbrew off</code></li>
</ul>
</li>
<li>註：在 Mac 環境下，XCode的 command line tools 要記得安裝，否則 pythonbrew install 會出現錯誤訊息</li>
</ul>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="no">ERROR</span><span class="p">:</span> <span class="no">Failed</span> <span class="n">to</span> <span class="n">install</span> <span class="no">Python</span><span class="o">-</span><span class="mi">3</span><span class="o">.</span><span class="mi">2</span><span class="o">.</span><span class="mi">3</span><span class="o">.</span> <span class="no">See</span><span class="sr"> /Users/</span><span class="n">hank</span><span class="o">/.</span><span class="n">pythonbrew</span><span class="o">/</span><span class="n">log</span><span class="o">/</span><span class="n">build</span><span class="o">.</span><span class="n">log</span> <span class="n">to</span> <span class="n">see</span> <span class="n">why</span><span class="o">.</span>
</span></code></pre></td></tr></table></div></figure>



]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[如何取消 git reset]]></title>
    <link href="http://bcswlmpke.github.io/blog/2013/06/29/how-to-cancel-git-reset/"/>
    <updated>2013-06-29T10:13:00+08:00</updated>
    <id>http://bcswlmpke.github.io/blog/2013/06/29/how-to-cancel-git-reset</id>
    <content type="html"><![CDATA[<p>假設原本有兩個 commit 如下</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="err">$</span> <span class="n">git</span> <span class="n">log</span>
</span><span class='line'><span class="n">commit</span> <span class="mi">98357430</span><span class="n">a2953262d75063d2711f6597dbdeb8bb</span>
</span><span class='line'><span class="no">Author</span><span class="p">:</span> <span class="no">Hank</span> <span class="no">Chen</span>
</span><span class='line'><span class="no">Date</span><span class="p">:</span>   <span class="no">Sat</span> <span class="no">Jun</span> <span class="mi">29</span> <span class="mi">11</span><span class="p">:</span><span class="mo">03</span><span class="p">:</span><span class="mi">27</span> <span class="mi">2013</span> <span class="o">+</span><span class="mi">0800</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">edit</span> <span class="n">file</span> <span class="n">a</span>
</span><span class='line'>
</span><span class='line'><span class="n">commit</span> <span class="mi">8</span><span class="n">a50f7fb56411210cff2141c92a7a5bc2007adaa</span>
</span><span class='line'><span class="no">Author</span><span class="p">:</span> <span class="no">Hank</span> <span class="no">Chen</span>
</span><span class='line'><span class="no">Date</span><span class="p">:</span>   <span class="no">Sat</span> <span class="no">Jun</span> <span class="mi">29</span> <span class="mi">11</span><span class="p">:</span><span class="mo">02</span><span class="p">:</span><span class="mi">50</span> <span class="mi">2013</span> <span class="o">+</span><span class="mi">0800</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">add</span> <span class="n">file</span> <span class="n">a</span>
</span></code></pre></td></tr></table></div></figure>


<p>後來執行了 <code>git reset</code>, 且 <code>git log</code> 的確只剩下一個 commit 記錄</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="err">$</span> <span class="n">git</span> <span class="n">reset</span> <span class="o">--</span><span class="n">soft</span> <span class="mi">8</span><span class="n">a50f7fb56411210cff2141c92a7a5bc2007adaa</span>
</span><span class='line'>
</span><span class='line'><span class="err">$</span> <span class="n">git</span> <span class="n">log</span>
</span><span class='line'><span class="n">commit</span> <span class="mi">8</span><span class="n">a50f7fb56411210cff2141c92a7a5bc2007adaa</span>
</span><span class='line'><span class="no">Author</span><span class="p">:</span> <span class="no">Hank</span> <span class="no">Chen</span>
</span><span class='line'><span class="no">Date</span><span class="p">:</span>   <span class="no">Sat</span> <span class="no">Jun</span> <span class="mi">29</span> <span class="mi">11</span><span class="p">:</span><span class="mo">02</span><span class="p">:</span><span class="mi">50</span> <span class="mi">2013</span> <span class="o">+</span><span class="mi">0800</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">add</span> <span class="n">file</span> <span class="n">a</span>
</span></code></pre></td></tr></table></div></figure>


<p>但想要反悔剛剛的 <code>git reset</code>, 回到先前的 commit, 可以怎麼做？</p>

<p>先透過 git reflog 列出目前 branch 被更新的記錄</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="err">$</span> <span class="n">git</span> <span class="n">reflog</span>
</span><span class='line'><span class="mi">8</span><span class="n">a50f7f</span> <span class="no">HEAD</span><span class="err">@</span><span class="p">{</span><span class="mi">0</span><span class="p">}:</span> <span class="n">reset</span><span class="p">:</span> <span class="n">moving</span> <span class="n">to</span> <span class="mi">8</span><span class="n">a50f7fb56411210cff2141c92a7a5bc2007adaa</span>
</span><span class='line'><span class="mi">9835743</span> <span class="no">HEAD</span><span class="err">@</span><span class="p">{</span><span class="mi">1</span><span class="p">}:</span> <span class="n">commit</span><span class="p">:</span> <span class="n">edit</span> <span class="n">file</span> <span class="n">a</span>
</span><span class='line'><span class="mi">8</span><span class="n">a50f7f</span> <span class="no">HEAD</span><span class="err">@</span><span class="p">{</span><span class="mi">2</span><span class="p">}:</span> <span class="n">commit</span> <span class="p">(</span><span class="n">initial</span><span class="p">):</span> <span class="n">add</span> <span class="n">file</span> <span class="n">a</span>
</span></code></pre></td></tr></table></div></figure>


<p>然後再透過 <code>git reset</code> 選擇回到前一個 commit</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="err">$</span> <span class="n">git</span> <span class="n">reset</span> <span class="o">--</span><span class="n">hard</span> <span class="mi">9835743</span>
</span></code></pre></td></tr></table></div></figure>


<p>看 <code>git log</code> 的結果如下：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="err">$</span> <span class="n">git</span> <span class="n">log</span>
</span><span class='line'><span class="n">commit</span> <span class="mi">98357430</span><span class="n">a2953262d75063d2711f6597dbdeb8bb</span>
</span><span class='line'><span class="no">Author</span><span class="p">:</span> <span class="no">Hank</span> <span class="no">Chen</span>
</span><span class='line'><span class="no">Date</span><span class="p">:</span>   <span class="no">Sat</span> <span class="no">Jun</span> <span class="mi">29</span> <span class="mi">11</span><span class="p">:</span><span class="mo">03</span><span class="p">:</span><span class="mi">27</span> <span class="mi">2013</span> <span class="o">+</span><span class="mi">0800</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">edit</span> <span class="n">file</span> <span class="n">a</span>
</span><span class='line'>
</span><span class='line'><span class="n">commit</span> <span class="mi">8</span><span class="n">a50f7fb56411210cff2141c92a7a5bc2007adaa</span>
</span><span class='line'><span class="no">Author</span><span class="p">:</span> <span class="no">Hank</span> <span class="no">Chen</span>
</span><span class='line'><span class="no">Date</span><span class="p">:</span>   <span class="no">Sat</span> <span class="no">Jun</span> <span class="mi">29</span> <span class="mi">11</span><span class="p">:</span><span class="mo">02</span><span class="p">:</span><span class="mi">50</span> <span class="mi">2013</span> <span class="o">+</span><span class="mi">0800</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">add</span> <span class="n">file</span> <span class="n">a</span>
</span></code></pre></td></tr></table></div></figure>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[(iOS)FacebookSDK armv7s slice error]]></title>
    <link href="http://bcswlmpke.github.io/blog/2013/06/16/ios-facebooksdk3-dot-0-armv7s-slice-builderror/"/>
    <updated>2013-06-16T13:52:00+08:00</updated>
    <id>http://bcswlmpke.github.io/blog/2013/06/16/ios-facebooksdk3-dot-0-armv7s-slice-builderror</id>
    <content type="html"><![CDATA[<p>最近在研究 FacebookSDK 的功能，
發現在朋友的手機 iPhone3GS iOS 6.0 會出現下面這樣的錯誤：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'><span class="nl">ld:</span> <span class="n">file</span> <span class="n">is</span> <span class="n">universal</span> <span class="p">(</span><span class="mi">3</span> <span class="n">clices</span><span class="p">)</span> <span class="n">but</span> <span class="n">doest</span> <span class="n">not</span> <span class="n">contain</span> <span class="n">a</span><span class="p">(</span><span class="n">n</span><span class="p">)</span> <span class="n">armv7s</span> <span class="n">slice</span>
</span></code></pre></td></tr></table></div></figure>


<p>有可能是跟 FacebookSDK 的版本有關，
但目前先透過下面的方式可以解決。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'><span class="n">TARGETS</span> <span class="o">&gt;</span> <span class="n">Build</span> <span class="n">Settings</span> <span class="o">&gt;</span> <span class="n">Valid</span> <span class="n">Architectures</span> <span class="err">只留下</span> <span class="n">armv7</span>
</span></code></pre></td></tr></table></div></figure>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[(iOS)偵測鍵盤大小變化]]></title>
    <link href="http://bcswlmpke.github.io/blog/2013/06/16/ios-detect-keyboard-size-change/"/>
    <updated>2013-06-16T13:50:00+08:00</updated>
    <id>http://bcswlmpke.github.io/blog/2013/06/16/ios-detect-keyboard-size-change</id>
    <content type="html"><![CDATA[<p>在 iOS 中，輸入時可以選擇英文或中文鍵盤，
例如中文的使用者也可以新增注意鍵盤，
而中文注意鍵盤的大小跟一般英文鍵盤的大小不同，
如果擔心鍵盤的大小會擋到 UI，
可以透過某些方式來得知鍵盤大小並進而調整 UI Layout。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'><span class="c1">// 註冊 UIKeyboardDidShowNotification 可以獲得 keyboard 的大小</span>
</span><span class='line'><span class="p">[[</span><span class="n">NSNotificationCenter</span> <span class="n">defaultCenter</span><span class="p">]</span>
</span><span class='line'>  <span class="nl">addObserver:</span><span class="n">self</span>
</span><span class='line'>  <span class="nl">selector:</span><span class="k">@selector</span><span class="p">(</span><span class="nl">keyboardDidShow:</span><span class="p">)</span>
</span><span class='line'>  <span class="nl">name:</span><span class="n">UIKeyboardDidShowNotification</span>
</span><span class='line'>  <span class="nl">object:</span><span class="nb">nil</span><span class="p">];</span>
</span><span class='line'>
</span><span class='line'><span class="o">-</span> <span class="p">(</span><span class="kt">void</span><span class="p">)</span><span class="nl">keyboardWasShown:</span><span class="p">(</span><span class="n">NSNotification</span><span class="o">*</span><span class="p">)</span><span class="n">notification</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>  <span class="c1">// userInfo提供了一些 keyboard 的訊息</span>
</span><span class='line'>  <span class="c1">// UIKeyboardFrameBeginUserInfoKey</span>
</span><span class='line'>  <span class="c1">// UIKeyboardFrameEndUserInfoKey</span>
</span><span class='line'>  <span class="c1">// UIKeyboardAnimationDurationUserInfoKey</span>
</span><span class='line'>  <span class="c1">// UIKeyboardAnimationCurveUserInfoKey</span>
</span><span class='line'>  <span class="n">NSDictionary</span><span class="o">*</span> <span class="n">info</span> <span class="o">=</span> <span class="p">[</span><span class="n">notification</span> <span class="n">userInfo</span><span class="p">];</span>
</span><span class='line'>  <span class="n">CGSize</span> <span class="n">kbSize</span> <span class="o">=</span> <span class="p">[[</span><span class="n">info</span> <span class="nl">objectForKey:</span><span class="n">UIKeyboardFrameEndUserInfoKey</span><span class="p">]</span> <span class="n">CGRectValue</span><span class="p">].</span><span class="n">size</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Git Notes]]></title>
    <link href="http://bcswlmpke.github.io/blog/2013/05/13/git-notes/"/>
    <updated>2013-05-13T22:14:00+08:00</updated>
    <id>http://bcswlmpke.github.io/blog/2013/05/13/git-notes</id>
    <content type="html"><![CDATA[<p>最近公司打算開始使用 Git,
所以除了平常在家玩 Open Source 外，
工作也可以使用 Git 了，
發現自己有些觀念沒記下來也會忘記，
所以要記錄下來。</p>

<ul>
<li>Setup Git (編輯 .gitconfig 或輸入指令)

<ul>
<li><code>git config --global user.name "Your Name Here"</code></li>
<li><code>git config --global user.email "your_email@example.com"</code></li>
<li>如果有多個帳號, 可以拿掉 <code>--global</code>，各自 repo 分別設定</li>
<li><code>git config --global color.ui true</code></li>
<li><code>git config --global core.editor "vi"</code></li>
</ul>
</li>
</ul>


<!-- more -->


<ul>
<li>.gitignore

<ul>
<li>如果 .gitignore not working，有可能是原本已經被 tracked，所以必須做下列的動作先 untracked

<ul>
<li><code>git rm -r --cached .</code></li>
<li><code>git add .</code></li>
<li><code>git commit -m ".gitignore is now working"</code></li>
</ul>
</li>
</ul>
</li>
<li>keep empty folder

<ul>
<li>因為 Git 不能 track empty directory, 所以必須放置 placekholder

<ul>
<li>touch directory/.gitkeep</li>
<li>git add -f directory/.gitkeep</li>
</ul>
</li>
</ul>
</li>
<li>HEAD 指向 current branch</li>
<li>砍掉 untracked 檔案

<ul>
<li>列出打算要清除的檔案 <code>git clean -n</code></li>
<li>清除檔案 <code>git clean -f</code></li>
<li>清除目錄 <code>git clean -f -d</code></li>
</ul>
</li>
<li>檢查多餘的空白

<ul>
<li><code>git diff --check</code></li>
</ul>
</li>
<li>何時使用 branch

<ul>
<li>實驗</li>
<li>實作新功能時</li>
<li>Bug fix</li>
<li>Refactor</li>
</ul>
</li>
<li>Branch

<ul>
<li>git branch new_feature</li>
<li>git check new_feature</li>
<li>git checkout -b new_feature</li>
<li>更名

<ul>
<li>git branch -m old_name new_name</li>
</ul>
</li>
<li>刪除branch

<ul>
<li>git branch new_feature -d</li>
</ul>
</li>
<li>合併branch

<ul>
<li>git checkout master</li>
<li>git merge new_feature</li>
<li>放棄合併:git reset &#8211;hard HEAD</li>
</ul>
</li>
</ul>
</li>
<li>Stash

<ul>
<li>git stash</li>
<li>git stash apply</li>
<li>git stash clear</li>
</ul>
</li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Mac Terminal 開啟 MacVim, Sublime Text 2]]></title>
    <link href="http://bcswlmpke.github.io/blog/2013/04/14/mac-terminal-open-macvim-subl2/"/>
    <updated>2013-04-14T21:02:00+08:00</updated>
    <id>http://bcswlmpke.github.io/blog/2013/04/14/mac-terminal-open-macvim-subl2</id>
    <content type="html"><![CDATA[<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">sudo</span> <span class="n">ln</span> <span class="o">-</span><span class="n">s</span><span class="sr"> /Applications/</span><span class="no">Sublime</span><span class="p">\</span> <span class="no">Text</span><span class="p">\</span> <span class="mi">2</span><span class="o">.</span><span class="n">app</span><span class="o">/</span><span class="no">Contents</span><span class="o">/</span><span class="no">SharedSupport</span><span class="o">/</span><span class="n">bin</span><span class="o">/</span><span class="n">subl</span><span class="sr"> /usr/</span><span class="n">bin</span><span class="o">/</span><span class="n">subl</span>
</span></code></pre></td></tr></table></div></figure>


<ul>
<li>Sublime Text 2

<ul>
<li>編輯文件:<code>subl file</code></li>
<li>打開目錄:<code>subl ..</code></li>
</ul>
</li>
</ul>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="c1">#!/bin/sh</span>
</span><span class='line'>
</span><span class='line'><span class="nb">open</span> <span class="o">-</span><span class="n">a</span><span class="sr"> /Applications/</span><span class="no">MacVim</span><span class="o">.</span><span class="n">app</span><span class="o">/</span><span class="no">Contents</span><span class="o">/</span><span class="no">MacOS</span><span class="o">/</span><span class="no">MacVim</span> <span class="vg">$@</span>
</span></code></pre></td></tr></table></div></figure>


<ul>
<li>MacVim

<ul>
<li>將 mvim script 放到 /usr/local/bin/</li>
<li>編輯文件:<code>mvim file</code></li>
</ul>
</li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[iOS 5 以下不支援 weak reference 遇到的問題]]></title>
    <link href="http://bcswlmpke.github.io/blog/2013/02/20/arc-weak-reference/"/>
    <updated>2013-02-20T20:26:00+08:00</updated>
    <id>http://bcswlmpke.github.io/blog/2013/02/20/arc-weak-reference</id>
    <content type="html"><![CDATA[<p>假設 Application 必須支援 iOS 4.3 的版本，
且是在使用 ARC 的情況下，
由於 iOS 5 才開始支援 weak reference，
那麼在 iOS 5 以下的版本，
可能會遇到下面這段程式有可能 crash 的問題：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">dispatch_async</span><span class="p">(</span><span class="n">dispatch_get_main_queue</span><span class="p">(),</span> <span class="o">^</span><span class="p">{</span>
</span><span class='line'>  <span class="no">NSUInteger</span> <span class="n">count</span> <span class="o">=</span> <span class="o">[</span><span class="nb">self</span><span class="o">.</span><span class="n">dataSource</span> <span class="n">numberOfItems</span><span class="ss">:self</span><span class="o">]</span><span class="p">;</span>
</span><span class='line'><span class="p">});</span>
</span></code></pre></td></tr></table></div></figure>


<p>首先，
因為 weak 屬性在 iOS 4.3 不支援，
所以 dataSource 是一個屬性設為 assign 的 property，
numberOfItems 是一個 delegate 由其它物件進行實作，
如果在開始執行 dispatch_async 這個 block 內的動作之前，
dataSource 已經被釋放了，
這時候輪到執行 block 內的動作時，
會去 retain dataSource，
但因為 dataSource 已經被釋放，所以這個 retain 的動作會造成 crash。</p>

<p>如果 dataSource 這個 property 的屬性為 weak，
那個在 dataSource 被釋放時，
這個 property 就會被設成 nil。
此時應該不會造成 crash 才對。(不曉得這樣的理解有沒有錯)</p>

<p>但因為 main thread 可能處於忙碌狀態，
所以 <code>dispatch_async(dispatch_get_main_queue()</code>的動作
未必會馬上被執行，就有機會遇到上述的問題。</p>

<p>在 iOS 4.3 除了 <a href="https://github.com/mikeash/MAZeroingWeakRef" title="MAZeroingWeakRef">MAZeroingWeakRef</a> 這個方式外，
不曉得在實作上，
大家是用什麼方式來避免上述的情況發生？</p>

<ul>
<li>2013.2.22 更新

<ul>
<li>附註：實作上述 <code>dispatch_async(dispatch_get_main_queue()</code> 的 class 只要在 dealloc 的時候把 self.dataSource 設為 nil, 就可避免 Crash 發生。</li>
</ul>
</li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[如何寫一個噗浪機器人]]></title>
    <link href="http://bcswlmpke.github.io/blog/2012/10/17/how-to-build-plurk-bot/"/>
    <updated>2012-10-17T22:02:00+08:00</updated>
    <id>http://bcswlmpke.github.io/blog/2012/10/17/how-to-build-plurk-bot</id>
    <content type="html"><![CDATA[<ul>
<li>步驟1：註冊新的噗浪帳號，並取得四項參數，可以參考<a href="http://blog.urdada.net/2011/10/28/426/" title="噗浪機器人範例程式 - 使用 Plurk API 2.0">噗浪機器人範例程式 - 使用 Plurk API 2.0</a>

<ul>
<li>App Key (Consumer Key)</li>
<li>App Secret (Consumer Secret)</li>
<li>Access Token (Token Key)</li>
<li>Access Token Secret (Token Secret)</li>
</ul>
</li>
<li>步驟2：範例測試

<ul>
<li>參考上面提到的網址，用 Python 來實驗，置換四個參數</li>
<li>下載 Library

<ul>
<li>(1) <a href="https://github.com/clsung/plurk-oauth" title="plurk-oauth">plurk-oauth</a></li>
<li>(2) <a href="https://github.com/simplegeo/python-oauth2" title="python-oauth2">python-oauth2 library</a></li>
<li>(3) <a href="http://code.google.com/p/httplib2/" title="httplib2">httplib2 client library in Python</a> <code>sudo python setup.py install</code></li>
</ul>
</li>
<li>將 python-oauth2 的 oauth2 目錄放到與 plurk-oauth 同一層即可。</li>
<li>執行範例，發一則含 <code>hello</code>字樣的噗，機器人會回 <code>world</code></li>
</ul>
</li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[UITableView 如何調整 Scroll Indicator 的位置？]]></title>
    <link href="http://bcswlmpke.github.io/blog/2012/10/17/change-uitable-scrollindicator-position/"/>
    <updated>2012-10-17T21:48:00+08:00</updated>
    <id>http://bcswlmpke.github.io/blog/2012/10/17/change-uitable-scrollindicator-position</id>
    <content type="html"><![CDATA[<p>嚴格說起來，應該是繼承自 UIScrollView 的都可以調整。
舉例來說，假設要顯示的是垂直方向的 Indicator (預設是開啟的)</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">_tableView</span><span class="o">.</span><span class="n">showsVerticalScrollIndicator</span> <span class="o">=</span> <span class="no">YES</span><span class="p">;</span>
</span></code></pre></td></tr></table></div></figure>


<p>預設位置是在 TableView 的最右邊，假設想放到左邊，或是中間，要怎麼做？
答案是：<code>UIEdgeInsets</code></p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">top</span><span class="p">,</span> <span class="n">left</span><span class="p">,</span> <span class="n">bottom</span><span class="p">,</span> <span class="n">right</span>
</span></code></pre></td></tr></table></div></figure>


<p>接下來要怎麼調整，就看個人需求囉！</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[UITableView 顯示上萬筆資料時，reloadData 很慢的問題]]></title>
    <link href="http://bcswlmpke.github.io/blog/2012/10/02/uitableview-reloaddata-slow/"/>
    <updated>2012-10-02T22:09:00+08:00</updated>
    <id>http://bcswlmpke.github.io/blog/2012/10/02/uitableview-reloaddata-slow</id>
    <content type="html"><![CDATA[<p>執行 UITableView reloadData，實作 numberOfRowsInSection 回傳 10000：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'><span class="o">-</span> <span class="p">(</span><span class="n">NSInteger</span><span class="p">)</span><span class="nl">tableView:</span><span class="p">(</span><span class="n">UITableView</span> <span class="o">*</span><span class="p">)</span><span class="n">tableView</span> <span class="nl">numberOfRowsInSection:</span><span class="p">(</span><span class="n">NSInteger</span><span class="p">)</span><span class="n">section</span>
</span></code></pre></td></tr></table></div></figure>


<p>但實際可視畫面的範圍可能只有 10 列資料顯示，
如果 heightForRowAtIndexPath 有實作，是會被呼叫 10000 次的。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'><span class="o">-</span> <span class="p">(</span><span class="n">CGFloat</span><span class="p">)</span><span class="nl">tableView:</span><span class="p">(</span><span class="n">UITableView</span> <span class="o">*</span><span class="p">)</span><span class="n">tableView</span> <span class="nl">heightForRowAtIndexPath:</span><span class="p">(</span><span class="n">NSIndexPath</span> <span class="o">*</span><span class="p">)</span><span class="n">indexPath</span>
</span></code></pre></td></tr></table></div></figure>


<ul>
<li>當資料量愈多，UI 實際顯示前的所需時間會愈久，

<ul>
<li>解決方式為不要去覆寫 heightForRowAtIndexPath，
而是直接設定 UITableView 身上的 rowHeight property。</li>
</ul>
</li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Tap手勢的處理]]></title>
    <link href="http://bcswlmpke.github.io/blog/2012/09/19/tap-gesture/"/>
    <updated>2012-09-19T23:11:00+08:00</updated>
    <id>http://bcswlmpke.github.io/blog/2012/09/19/tap-gesture</id>
    <content type="html"><![CDATA[<p>要處理 Single Tap 與 Double Tap 的時候,
除了下面這行要設定以外</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'>  <span class="p">[</span><span class="n">_singleTap</span> <span class="nl">requireGestureRecognizerToFail:</span><span class="n">_doubleTap</span><span class="p">];</span>
</span></code></pre></td></tr></table></div></figure>


<p>還必須設定</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'>  <span class="p">[</span><span class="n">_singleTap</span> <span class="nl">setDelaysTouchesBegan:</span><span class="n">YES</span><span class="p">];</span>
</span><span class='line'>  <span class="p">[</span><span class="n">_doubleTap</span> <span class="nl">setDelaysTouchesBegan:</span><span class="n">YES</span><span class="p">];</span>
</span></code></pre></td></tr></table></div></figure>


<p>否則當 Double Tap trigger 時，也會觸發 Single Tap.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[XVim for XCode]]></title>
    <link href="http://bcswlmpke.github.io/blog/2012/08/20/new-post/"/>
    <updated>2012-08-20T22:42:00+08:00</updated>
    <id>http://bcswlmpke.github.io/blog/2012/08/20/new-post</id>
    <content type="html"><![CDATA[<ul>
<li>XVim 現在似乎比較穩定了

<ul>
<li>github: <a href="https://github.com/JugglerShu/XVim" title="github">https://github.com/JugglerShu/XVim</a></li>
<li>package: <a href="http://programming.jugglershu.net/xvim/" title="package">http://programming.jugglershu.net/xvim/</a></li>
</ul>
</li>
</ul>


<p>下載最新的 package 然後重啟 XCode 就可以使用了！</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Galaxy S 不死，更新至 ICS 4.0.4]]></title>
    <link href="http://bcswlmpke.github.io/blog/2012/06/16/i9000-ics/"/>
    <updated>2012-06-16T10:05:00+08:00</updated>
    <id>http://bcswlmpke.github.io/blog/2012/06/16/i9000-ics</id>
    <content type="html"><![CDATA[<p><img src="http://farm6.staticflickr.com/5038/7378210724_6c4fded6fd.jpg" title="ScreenCapture1" alt="ScreenCapture1" /> <img src="http://farm6.staticflickr.com/5336/7378210814_75c0c1522a.jpg" title="ScreenCapture2" alt="ScreenCapture1" /></p>

<!-- more -->


<p>我的手機 I9000 8G 原本是刷 MIUI 2.3.7 for I9000，
我安裝的軟體不會超過30個，
程式區一直都有 1.8G 以上可用，
資料區一直都有 3.5G 以上可用。
但因為小米用久了真的愈來愈頓，
整體的操作經驗讓我很失望。</p>

<p>目前看起來 Samsung 應該是不會幫 I9000 升級到 ICS 了，
不過 XDA 的大神們以及台灣的熱心網友們當然還是會想辦法讓 I9000 能吃到冰淇淋三明治，
畢竟它的硬體條件不應該只留在薑餅時代！</p>

<p>我覺得我的 I9000 升到 ICS 後，
使用了一天感覺蠻省電的 (以我個人的使用方式，稍後會說明)，
安裝的總軟體數約30個，
然後整個操作經驗感覺都蠻順暢的，
我想 I9000 應該也很欣慰，
未來我應該不會再更新上去了，
打算就這樣子再用個2年看看。</p>

<p>廢話不多說，
趕緊來介紹刷機的流程～</p>

<hr />

<ul>
<li>備份

<ul>
<li>備份手機通訊錄 (這個我一直放 Google)</li>
<li>照片</li>
<li>音樂</li>
<li>其它 (簡訊、遊戲等，我是不備份，這看個人)</li>
</ul>
</li>
</ul>


<hr />

<ul>
<li>手機還原到出廠設定

<ul>
<li>這會清掉所有安裝的程式</li>
<li>但資料區的東西不會刪除</li>
<li>資料區盡量空出 <code>500MB ~ 1GB</code> 的空間 (我的習慣)</li>
</ul>
</li>
</ul>


<hr />

<ul>
<li>安裝三星 Kies

<ul>
<li>但是在刷機前，請打開工作管理員，將 Kies 的程序都結束掉</li>
</ul>
</li>
</ul>


<hr />

<ul>
<li>把刷機所需的檔案放到手機 <code> /sdcard 根目錄</code>下

<ul>
<li>請比對電腦的檔案跟手機裡的檔案，大小要一樣</li>
<li>如果檔案大小不對，刷壞了可能會哭; 這讓我想到以前寫 IP Camera 的
韌體更新程式，Firmware 上傳至機器要做 CSC check 才能更新，不然更新失敗就慘了 (笑)</li>
</ul>
</li>
</ul>


<hr />

<ul>
<li>開始刷機

<ul>
<li>整個流程請參考 <a href="https://sites.google.com/site/itsamazinggalaxy/bing-qi-lin-san-ming-zhi-android-4/ak-lan-ren-zi-yong-ban/ak_v2" title="AK_V2">DingDingc&#8217;s Galaxy S Website! AK_V2</a></li>
<li>我的刷機是依照 DingDingc 的教學一步一步做的，我覺得這個作者真的很用心，大家真的要感謝他！</li>
<li>請自行選擇 ICS ROM (我個人是刷 <code>AK_V2</code>)，然後照作者的步驟做就對了，文字請多讀幾次，然後確實執行！</li>
<li>我自己是從 MIUI 2.3.7 更新到 ICS AKOP 4.0.4，所以真的如作者說的一樣，什麼天王老子ROM，照步驟刷就對了！</li>
<li>新手請記住：音量鍵上 + 首頁鍵 + 電源鍵 為 <code>Recovery Mode</code>; 音量鍵下 + 首頁鍵 + 電源鍵 為 <code>Download Mode</code></li>
<li>黑化風格包我自己是沒有刷，所以我只到步驟7就完成了，而且我沒有超頻；想要黑化風格的人請完成步驟8</li>
<li>我覺得手機穩定，省電，操作順暢最重要，所以未來除非有什麼大問題非修正不可，否則我個人是不會一直刷機</li>
</ul>
</li>
</ul>


<hr />

<ul>
<li>手機如何省電 (這是我個人的使用習慣)

<ul>
<li>螢幕是最耗電的，所以我是將螢幕亮度改成手動，然後亮度調低</li>
<li>同步功能可以關閉</li>
<li>需要登出帳號使用的程式，我使用後一定會登出 (個人習慣)，因為不登出的話，即使是同步功能關閉，有些程式還是會
偷偷跑</li>
<li>WIFI, 3G 不使用就關閉</li>
</ul>
</li>
</ul>


<hr />

<ul>
<li>軟體安裝(列出我常用的)

<ul>
<li>我刷 AK_V2，作者已經有提供軟體補包 for 任何一個版本的 ICS ROM (這個我有裝，看個人需要)</li>
<li>Camera360</li>
<li>SwiFTP</li>
<li>ES 檔案總管</li>
<li>RealCalc</li>
<li>快圖瀏覽</li>
<li>MoboPlayer</li>
<li>Plurka</li>
<li>Google+</li>
<li>Adobe Reader</li>
<li>Dropbox</li>
<li>LINE</li>
<li>Dolphin Browser</li>
<li>Tunee Music</li>
<li>Shazam</li>
<li>超級管理器</li>
</ul>
</li>
</ul>


<p>最後，祝大家都能快樂的使用 I9000，都能有順暢的手機使用體驗！</p>

<hr />
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Rails Develop Environment Setup]]></title>
    <link href="http://bcswlmpke.github.io/blog/2012/06/12/rails-develop-environment/"/>
    <updated>2012-06-12T20:22:00+08:00</updated>
    <id>http://bcswlmpke.github.io/blog/2012/06/12/rails-develop-environment</id>
    <content type="html"><![CDATA[<p>依照 Rails 101 的安裝步驟，但可能安裝的版本差太多，
看起來會遇到不少問題，
所以就一步一步筆記下來。</p>

<!-- more -->


<ul>
<li>Homebrew

<ul>
<li>ruby -e &#8220;$(curl -fsSL https://raw.github.com/gist/323731)&#8221;</li>
<li>brew install git (安裝 Git)</li>
<li>brew update (更新套件清單)</li>
<li>brew search (搜尋套件)</li>
<li>留意 /usr/local/Library/Formula/</li>
</ul>
</li>
<li>ImageMagick

<ul>
<li>brew install imagemagick (會自行處理相依套件問題)</li>
</ul>
</li>
<li>MySQL Community Server

<ul>
<li>mysql-5.5.25-osx10.6-x86_64.dmg</li>
</ul>
</li>
<li>RVM</li>
<li>REE</li>
<li>Ruby gems</li>
<li>HTTP Server

<ul>
<li>Pow</li>
<li>Powder</li>
</ul>
</li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[ARC 與 非ARC 在大量資料的情況下的執行速度相差數倍]]></title>
    <link href="http://bcswlmpke.github.io/blog/2012/05/08/arc-nonarc-performance/"/>
    <updated>2012-05-08T21:49:00+08:00</updated>
    <id>http://bcswlmpke.github.io/blog/2012/05/08/arc-nonarc-performance</id>
    <content type="html"><![CDATA[<p>將手邊的 iOS 專案轉換為 ARC，
讓 XCode 於 Compile 時期安插必要的記憶體管理程式碼，
但是它所產生的程式碼是否與我們所想的一樣，
這個就未必了。</p>

<p>我們應該盡可能讓 XCode 幫我們產生正確的記憶體管理程式碼，
但必要時，我們也可以自己對程式碼進行改善！</p>

<p>下面舉一個例子，同樣的程式碼，只是在「ARC」與「非ARC」的情況下編譯執行，
但是兩者所需要的時間是相差數倍的！</p>

<!-- more -->




<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'>  <span class="kt">int</span> <span class="n">n</span> <span class="o">=</span> <span class="mi">600000</span><span class="p">,</span> <span class="n">m</span> <span class="o">=</span> <span class="mi">10000000</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">arr</span> <span class="o">=</span> <span class="p">[</span><span class="n">NSMutableArray</span> <span class="n">new</span><span class="p">];</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">for</span> <span class="p">(</span><span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="n">n</span><span class="p">;</span> <span class="n">i</span><span class="o">++</span><span class="p">)</span>
</span><span class='line'>        <span class="p">[</span><span class="n">arr</span> <span class="nl">addObject:</span><span class="p">[</span><span class="n">NSNumber</span> <span class="nl">numberWithInt:</span><span class="mi">1</span><span class="p">]];</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">CFAbsoluteTime</span> <span class="n">start</span> <span class="o">=</span> <span class="n">CFAbsoluteTimeGetCurrent</span><span class="p">();</span>
</span><span class='line'>
</span><span class='line'>    <span class="kt">id</span> <span class="n">obj</span> <span class="o">=</span> <span class="nb">nil</span><span class="p">;</span>
</span><span class='line'>    <span class="k">for</span> <span class="p">(</span><span class="kt">int</span> <span class="n">j</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="n">j</span> <span class="o">&lt;</span> <span class="n">m</span><span class="p">;</span> <span class="n">j</span><span class="o">++</span><span class="p">)</span>
</span><span class='line'>    <span class="p">{</span>
</span><span class='line'>        <span class="n">obj</span> <span class="o">=</span> <span class="p">[</span><span class="n">arr</span> <span class="nl">objectAtIndex:</span><span class="n">n</span> <span class="o">-</span> <span class="mi">1</span><span class="p">];</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">CFAbsoluteTime</span> <span class="n">end</span> <span class="o">=</span> <span class="n">CFAbsoluteTimeGetCurrent</span><span class="p">();</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">NSLog</span><span class="p">(</span><span class="s">@&quot;end:%lf, start:%lf, diff:%lf&quot;</span><span class="p">,</span> <span class="n">end</span><span class="p">,</span> <span class="n">start</span><span class="p">,</span> <span class="n">end</span> <span class="o">-</span> <span class="n">start</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>    <span class="p">[</span><span class="n">arr</span> <span class="n">release</span><span class="p">];</span> <span class="c1">// -&gt; 這一行是「非ARC」需要加上的，但「ARC」沒有這行</span>
</span></code></pre></td></tr></table></div></figure>


<p>執行結果：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'><span class="err">非</span><span class="nl">ARC:</span>  <span class="nl">end:</span><span class="mf">358178433.846184</span><span class="p">,</span> <span class="nl">start:</span><span class="mf">358178433.753032</span><span class="p">,</span> <span class="nl">diff:</span><span class="mf">0.093152</span>
</span><span class='line'><span class="nl">ARC:</span>    <span class="nl">end:</span><span class="mf">358178929.480108</span><span class="p">,</span> <span class="nl">start:</span><span class="mf">358178928.841418</span><span class="p">,</span> <span class="nl">diff:</span><span class="mf">0.638690</span>
</span><span class='line'><span class="err">可以看出「非</span><span class="n">ARC</span><span class="err">」的版本比「</span><span class="n">ARC</span><span class="err">」的版本快了近</span><span class="mi">7</span><span class="err">倍！</span>
</span></code></pre></td></tr></table></div></figure>


<p>但實際上程式是慢在哪呢？
-> 慢在 <code>obj = [arr objectAtIndex:n - 1];</code> 這邊，
XCode 在 Compile 的時候，幫我們安插了類似下面的程式，</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'>  <span class="n">obj</span> <span class="o">=</span> <span class="p">[[</span><span class="n">arr</span> <span class="nl">objectAtIndex:</span><span class="n">n</span> <span class="o">-</span> <span class="mi">1</span><span class="p">]</span> <span class="n">retain</span><span class="p">];</span>
</span><span class='line'>  <span class="p">[</span><span class="n">obj</span> <span class="n">autorelease</span><span class="p">];</span>
</span><span class='line'>
</span><span class='line'><span class="err">如果把「非</span><span class="n">ARC</span><span class="err">」的版本修改為上述的程式碼，</span>
</span><span class='line'><span class="err">則執行結果：</span>
</span><span class='line'><span class="err">非</span><span class="nl">ARC:</span>  <span class="nl">end:</span><span class="mf">358179022.496308</span><span class="p">,</span> <span class="nl">start:</span><span class="mf">358179021.894909</span><span class="p">,</span> <span class="nl">diff:</span><span class="mf">0.601399</span>
</span><span class='line'><span class="err">是不是就變慢了！</span>
</span></code></pre></td></tr></table></div></figure>


<p>因此，XCode 在 Compile 的時候，我想它對於程式的記憶體管理是採取較保守的態度，
如此看來，iOS 5 預設 property 為 strong 也就不意外了！</p>

<p>那麼上面所舉的例子要怎麼解決呢？
-> 我們可以透過 <code>Toll-Free Bridged Types</code> 來解決！
來看一下，我們將 ARC 的版本的程式碼改成下面這個樣子：
將<code>NSArray</code>改成使用<code>CFArrayRef</code>，
這是 Foundation class -> Core Foundation type 的轉換，
這樣的轉換是 Toll-Free 的！</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'>  <span class="n">__unsafe_unretained</span> <span class="kt">id</span> <span class="n">obj</span><span class="p">;</span>
</span><span class='line'>  <span class="k">for</span> <span class="p">(</span><span class="kt">int</span> <span class="n">j</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="n">j</span> <span class="o">&lt;</span> <span class="n">m</span><span class="p">;</span> <span class="n">j</span><span class="o">++</span><span class="p">)</span>
</span><span class='line'>  <span class="p">{</span>
</span><span class='line'>      <span class="n">obj</span> <span class="o">=</span> <span class="p">(</span><span class="n">__bridge</span> <span class="n">__unsafe_unretained</span> <span class="kt">id</span><span class="p">)</span><span class="n">CFArrayGetValueAtIndex</span><span class="p">((</span><span class="n">__bridge</span> <span class="n">CFArrayRef</span><span class="p">)</span><span class="n">arr</span><span class="p">,</span> <span class="n">n</span> <span class="o">-</span> <span class="mi">1</span><span class="p">);</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'><span class="err">如果把「</span><span class="n">ARC</span><span class="err">」的版本修改為上述的程式碼，</span>
</span><span class='line'><span class="err">則執行結果：</span>
</span><span class='line'><span class="err">非</span><span class="nl">ARC:</span>  <span class="nl">end:</span><span class="mf">358179460.237259</span><span class="p">,</span> <span class="nl">start:</span><span class="mf">358179460.004701</span><span class="p">,</span> <span class="nl">diff:</span><span class="mf">0.232558</span>
</span><span class='line'><span class="err">是不是就變快了！</span><span class="p">(</span><span class="err">但還沒有辦法跟原本的「非</span><span class="n">ARC</span><span class="err">」版本一樣快！</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>所以其實寫程式的時候要多想一下有沒有其它作法，
因為不同的寫法雖然可能達成的結果相同，
但所需要的時間是不同的，
在使用 ARC 時，
如果能清楚的知道自己所創建的物件是被 retain 的狀態，
那麼在傳遞的過程中就可以視需求決定接收此物件是要 retain 或只是 assign，
這樣可以讓 XCode 在 Compile 的時候，
依照我們給它的指示去產生記憶體管理的程式碼，
避免不必要或多餘的效能損失！</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[將專案轉換為ARC]]></title>
    <link href="http://bcswlmpke.github.io/blog/2012/05/01/convert-to-arc/"/>
    <updated>2012-05-01T20:28:00+08:00</updated>
    <id>http://bcswlmpke.github.io/blog/2012/05/01/convert-to-arc</id>
    <content type="html"><![CDATA[<h3>Automatic Reference Counting</h3>

<ul>
<li>ARC

<ul>
<li>XCode 4.2 開始支援</li>
<li>Preferences > General > enable Continue building after errors</li>
<li>Edit > Refactor > Convert to Objective-C ARC</li>
<li>using the Apple LLVM compiler</li>
<li>如果轉換失敗，會提供錯誤訊息，等手動修正後，就可以重新啟動 Refactor ARC-conversion workflow
<img src="http://farm8.staticflickr.com/7238/7131702787_9e4cdfcfe1_z.jpg" title="Convert to ARC dialog" alt="Convert to ARC dialog" /></li>
<li>轉換成功後，你可以 review automatic changes，也可以做 snapshot 供之後回復(如果有需要)，然後選擇 Save</li>
</ul>
</li>
</ul>


<!-- more -->


<h3>將手上的專案轉成 ARC 的一些心得整理</h3>

<ul>
<li>不想要轉換為 ARC 的 source file 可加上 <code>-fno-objc-arc</code></li>
<li>不需要自己加上 <code>retain</code>、<code>autorelease</code>、<code>release</code>、<code>[super dealloc]</code></li>
<li>Objects in the struct are unretained</li>
</ul>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'><span class="k">typedef</span> <span class="k">struct</span> <span class="p">{</span>
</span><span class='line'>  <span class="n">__unsafe_unretained</span> <span class="n">NSString</span> <span class="o">*</span><span class="n">name</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span> <span class="n">MyStruct</span><span class="p">;</span>
</span></code></pre></td></tr></table></div></figure>


<ul>
<li>關於 weak</li>
</ul>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'><span class="n">Becase</span> <span class="n">of</span> <span class="err">「</span><span class="n">__weak</span><span class="err">」</span> <span class="n">references</span> <span class="n">only</span> <span class="n">work</span> <span class="n">on</span> <span class="n">iOS</span> <span class="mi">5</span> <span class="n">and</span> <span class="n">above</span><span class="p">.</span>
</span><span class='line'><span class="n">If</span> <span class="n">you</span> <span class="n">have</span> <span class="n">the</span> <span class="n">deployment</span> <span class="n">target</span> <span class="n">set</span> <span class="n">to</span> <span class="n">anything</span> <span class="n">earlier</span><span class="p">,</span> <span class="n">then</span> <span class="n">you</span><span class="err">&#39;</span><span class="n">ll</span> <span class="n">get</span> <span class="n">the</span> <span class="n">error</span><span class="p">.</span>
</span><span class='line'><span class="n">Basically</span><span class="p">,</span> <span class="k">if</span> <span class="n">you</span> <span class="n">want</span> <span class="n">to</span> <span class="n">deploy</span> <span class="n">to</span> <span class="n">earlier</span> <span class="n">devices</span> <span class="n">you</span> <span class="n">can</span><span class="err">&#39;</span><span class="n">t</span> <span class="n">use</span> <span class="n">automated</span> <span class="err">「</span><span class="n">__weak</span><span class="err">」</span> <span class="n">references</span><span class="p">.</span>
</span><span class='line'><span class="n">The</span> <span class="n">substitute</span> <span class="n">would</span> <span class="n">be</span> <span class="err">「</span><span class="n">__unsafe_unretained</span><span class="err">」</span><span class="p">.</span>
</span></code></pre></td></tr></table></div></figure>


<ul>
<li>NSAutoreleasePool 要修改如下</li>
</ul>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'>  <span class="p">[</span><span class="n">Before</span><span class="p">]</span>
</span><span class='line'>    <span class="n">NSAutoreleasePool</span> <span class="o">*</span> <span class="n">pool</span> <span class="o">=</span> <span class="p">[[</span><span class="n">NSAutoreleasePool</span> <span class="n">alloc</span><span class="p">]</span> <span class="n">init</span><span class="p">];</span>
</span><span class='line'>    <span class="p">[</span><span class="n">pool</span> <span class="n">drain</span><span class="p">];</span>
</span><span class='line'>  <span class="p">[</span><span class="n">After</span><span class="p">]</span>
</span><span class='line'>    <span class="err">@</span><span class="n">autoreleasepool</span> <span class="p">{</span>
</span><span class='line'>    <span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<ul>
<li>cast of C pointer type &#8216;void <em>&#8217; to Objective-C pointer type &#8216;NSObject </em>&#8217; requires a bridged cast <code>__bridge</code></li>
</ul>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'>  <span class="n">NSObject</span><span class="o">*</span> <span class="n">myObject</span> <span class="o">=</span> <span class="p">[[</span><span class="n">NSObject</span> <span class="n">alloc</span><span class="p">]</span> <span class="n">init</span><span class="p">];</span>
</span><span class='line'>  <span class="kt">void</span><span class="o">*</span> <span class="n">myObjectPointer</span> <span class="o">=</span> <span class="p">(</span><span class="n">__bridge</span> <span class="kt">void</span><span class="o">*</span><span class="p">)</span><span class="n">myObject</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>  <span class="kt">void</span><span class="o">*</span> <span class="n">myObjectPointer2</span> <span class="o">=</span> <span class="nb">NULL</span><span class="p">;</span>
</span><span class='line'>  <span class="n">NSObject</span><span class="o">*</span> <span class="n">myObject2</span> <span class="o">=</span> <span class="p">(</span><span class="n">__bridge</span> <span class="n">NSObject</span><span class="o">*</span><span class="p">)</span><span class="n">myObjectPointer2</span><span class="p">;</span>
</span></code></pre></td></tr></table></div></figure>


<ul>
<li>assign retained object to unsafe_unretained variable, object will be released after assignment</li>
</ul>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'>  <span class="err">請在</span> <span class="k">@property</span> <span class="err">加上</span> <span class="n">strong</span>
</span><span class='line'>  <span class="err">或是在變數名稱前加上</span> <span class="n">__strong</span>
</span></code></pre></td></tr></table></div></figure>


<ul>
<li>發生 leaking 怎麼辦？</li>
</ul>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'>  <span class="err">如果發生類似</span> <span class="o">***</span> <span class="n">__NSAutoreleaseNoPool</span><span class="p">()</span><span class="o">:</span> <span class="n">Object</span> <span class="mh">0x648ad80</span> <span class="n">of</span> <span class="n">class</span> <span class="n">NSCFString</span> <span class="n">autoreleased</span> <span class="n">with</span> <span class="n">no</span> <span class="n">pool</span> <span class="k">in</span> <span class="n">place</span> <span class="o">-</span> <span class="n">just</span> <span class="n">leaking</span> <span class="err">的訊息，</span>
</span><span class='line'>  <span class="err">可以透過</span> <span class="n">Profile</span> <span class="o">-&gt;</span> <span class="n">Leak</span> <span class="n">Tool</span> <span class="err">找出有問題的地方</span>
</span></code></pre></td></tr></table></div></figure>


<ul>
<li>如果是 static method 回傳一個物件，要怎麼釋放？(以 C 所產生的物件為例)</li>
</ul>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'>  <span class="n">CFUUIDRef</span> <span class="n">theUUID</span> <span class="o">=</span> <span class="n">CFUUIDCreate</span><span class="p">(</span><span class="nb">NULL</span><span class="p">);</span>
</span><span class='line'>  <span class="n">CFStringRef</span> <span class="n">strUUID</span> <span class="o">=</span> <span class="n">CFUUIDCreateString</span><span class="p">(</span><span class="nb">NULL</span><span class="p">,</span> <span class="n">theUUID</span><span class="p">);</span>
</span><span class='line'>  <span class="n">CFRelease</span><span class="p">(</span><span class="n">theUUID</span><span class="p">);</span>
</span><span class='line'>  
</span><span class='line'>  <span class="k">return</span> <span class="p">(</span><span class="n">__bridge_transfer</span> <span class="n">NSString</span> <span class="o">*</span><span class="p">)</span><span class="n">strUUID</span><span class="p">;</span> <span class="c1">// 釋放原先所有權，將所有權交給 ARC </span>
</span></code></pre></td></tr></table></div></figure>


<ul>
<li>id array member instance under ARC</li>
</ul>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'><span class="kt">id</span><span class="o">&lt;</span><span class="n">ITest</span><span class="o">&gt;</span> <span class="n">__strong</span> <span class="o">*</span><span class="n">iArray</span> <span class="o">=</span> <span class="nb">nil</span><span class="p">;</span>
</span><span class='line'><span class="n">iArray</span> <span class="o">=</span> <span class="p">(</span><span class="kt">id</span><span class="o">&lt;</span><span class="n">ITest</span><span class="o">&gt;</span> <span class="n">__strong</span> <span class="o">*</span><span class="p">)</span><span class="n">calloc</span><span class="p">(</span><span class="k">sizeof</span><span class="p">(</span><span class="kt">id</span><span class="o">&lt;</span><span class="n">ITest</span><span class="o">&gt;</span><span class="p">),</span> <span class="n">Size</span><span class="p">);</span>
</span></code></pre></td></tr></table></div></figure>


<h3>一些不錯的參考連結</h3>

<ul>
<li>Property declarations</li>
</ul>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'><span class="err">「</span><span class="n">assign</span><span class="err">」</span> <span class="n">implies</span> <span class="err">「</span><span class="n">__unsafe_unretained</span><span class="err">」</span><span class="n">ownership</span><span class="p">.</span>
</span><span class='line'><span class="err">「</span><span class="n">copy</span><span class="err">」</span> <span class="n">implies</span> <span class="err">「</span><span class="n">__strong</span><span class="err">」</span> <span class="n">ownership</span><span class="p">,</span> <span class="n">as</span> <span class="n">well</span> <span class="n">as</span> <span class="n">the</span> <span class="n">usual</span> <span class="n">behavior</span> <span class="n">of</span> <span class="n">copy</span> <span class="n">semantics</span> <span class="n">on</span> <span class="n">the</span> <span class="n">setter</span><span class="p">.</span>
</span><span class='line'><span class="err">「</span><span class="n">retain</span><span class="err">」</span> <span class="n">implies</span> <span class="err">「</span><span class="n">__strong</span><span class="err">」</span> <span class="n">ownership</span><span class="p">.</span>
</span><span class='line'><span class="err">「</span><span class="n">strong</span><span class="err">」</span> <span class="n">implies</span> <span class="err">「</span><span class="n">__strong</span><span class="err">」</span> <span class="n">ownership</span><span class="p">.</span>
</span><span class='line'><span class="err">「</span><span class="n">unsafe_unretained</span><span class="err">」</span> <span class="n">implies</span> <span class="err">「</span><span class="n">__unsafe_unretained</span><span class="err">」</span> <span class="n">ownership</span><span class="p">.</span>
</span><span class='line'><span class="n">weak</span> <span class="n">implies</span> <span class="n">__weak</span> <span class="n">ownership</span><span class="p">.</span>
</span></code></pre></td></tr></table></div></figure>


<ul>
<li>Bridged casts</li>
</ul>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'><span class="n">A</span> <span class="n">bridged</span> <span class="n">cast</span> <span class="n">is</span> <span class="n">a</span> <span class="n">C</span><span class="o">-</span><span class="n">style</span> <span class="n">cast</span> <span class="n">annotated</span> <span class="n">with</span> <span class="n">one</span> <span class="n">of</span> <span class="n">three</span> <span class="nl">keywords:</span>
</span><span class='line'>
</span><span class='line'><span class="p">(</span><span class="n">__bridge</span> <span class="n">T</span><span class="p">)</span> <span class="n">op</span> <span class="n">casts</span> <span class="n">the</span> <span class="n">operand</span> <span class="n">to</span> <span class="n">the</span> <span class="n">destination</span> <span class="n">type</span> <span class="n">T</span><span class="p">.</span> <span class="n">If</span> <span class="n">T</span> <span class="n">is</span> <span class="n">a</span> <span class="n">retainable</span> <span class="n">object</span> <span class="n">pointer</span> <span class="n">type</span><span class="p">,</span> <span class="n">then</span> <span class="n">op</span> <span class="n">must</span> <span class="n">have</span> <span class="n">a</span> <span class="n">non</span><span class="o">-</span><span class="n">retainable</span> <span class="n">pointer</span> <span class="n">type</span><span class="p">.</span> <span class="n">If</span> <span class="n">T</span> <span class="n">is</span> <span class="n">a</span> <span class="n">non</span><span class="o">-</span><span class="n">retainable</span> <span class="n">pointer</span> <span class="n">type</span><span class="p">,</span> <span class="n">then</span> <span class="n">op</span> <span class="n">must</span> <span class="n">have</span> <span class="n">a</span> <span class="n">retainable</span> <span class="n">object</span> <span class="n">pointer</span> <span class="n">type</span><span class="p">.</span> <span class="n">Otherwise</span> <span class="n">the</span> <span class="n">cast</span> <span class="n">is</span> <span class="n">ill</span><span class="o">-</span><span class="n">formed</span><span class="p">.</span> <span class="n">There</span> <span class="n">is</span> <span class="n">no</span> <span class="n">transfer</span> <span class="n">of</span> <span class="n">ownership</span><span class="p">,</span> <span class="n">and</span> <span class="n">ARC</span> <span class="n">inserts</span> <span class="n">no</span> <span class="n">retain</span> <span class="n">operations</span><span class="p">.</span>
</span><span class='line'><span class="p">(</span><span class="n">__bridge_retained</span> <span class="n">T</span><span class="p">)</span> <span class="n">op</span> <span class="n">casts</span> <span class="n">the</span> <span class="n">operand</span><span class="p">,</span> <span class="n">which</span> <span class="n">must</span> <span class="n">have</span> <span class="n">retainable</span> <span class="n">object</span> <span class="n">pointer</span> <span class="n">type</span><span class="p">,</span> <span class="n">to</span> <span class="n">the</span> <span class="n">destination</span> <span class="n">type</span><span class="p">,</span> <span class="n">which</span> <span class="n">must</span> <span class="n">be</span> <span class="n">a</span> <span class="n">non</span><span class="o">-</span><span class="n">retainable</span> <span class="n">pointer</span> <span class="n">type</span><span class="p">.</span> <span class="n">ARC</span> <span class="n">retains</span> <span class="n">the</span> <span class="n">value</span><span class="p">,</span> <span class="n">subject</span> <span class="n">to</span> <span class="n">the</span> <span class="n">usual</span> <span class="n">optimizations</span> <span class="n">on</span> <span class="n">local</span> <span class="n">values</span><span class="p">,</span> <span class="n">and</span> <span class="n">the</span> <span class="n">recipient</span> <span class="n">is</span> <span class="n">responsible</span> <span class="k">for</span> <span class="n">balancing</span> <span class="n">that</span> <span class="o">+</span><span class="mf">1.</span>
</span><span class='line'><span class="p">(</span><span class="n">__bridge_transfer</span> <span class="n">T</span><span class="p">)</span> <span class="n">op</span> <span class="n">casts</span> <span class="n">the</span> <span class="n">operand</span><span class="p">,</span> <span class="n">which</span> <span class="n">must</span> <span class="n">have</span> <span class="n">non</span><span class="o">-</span><span class="n">retainable</span> <span class="n">pointer</span> <span class="n">type</span><span class="p">,</span> <span class="n">to</span> <span class="n">the</span> <span class="n">destination</span> <span class="n">type</span><span class="p">,</span> <span class="n">which</span> <span class="n">must</span> <span class="n">be</span> <span class="n">a</span> <span class="n">retainable</span> <span class="n">object</span> <span class="n">pointer</span> <span class="n">type</span><span class="p">.</span> <span class="n">ARC</span> <span class="n">will</span> <span class="n">release</span> <span class="n">the</span> <span class="n">value</span> <span class="n">at</span> <span class="n">the</span> <span class="n">end</span> <span class="n">of</span> <span class="n">the</span> <span class="n">enclosing</span> <span class="n">full</span><span class="o">-</span><span class="n">expression</span><span class="p">,</span> <span class="n">subject</span> <span class="n">to</span> <span class="n">the</span> <span class="n">usual</span> <span class="n">optimizations</span> <span class="n">on</span> <span class="n">local</span> <span class="n">values</span><span class="p">.</span>
</span><span class='line'>
</span><span class='line'><span class="n">Using</span> <span class="n">a</span> <span class="n">__bridge_retained</span> <span class="n">or</span> <span class="n">__bridge_transfer</span> <span class="n">cast</span> <span class="n">purely</span> <span class="n">to</span> <span class="n">convince</span> <span class="n">ARC</span> <span class="n">to</span> <span class="n">emit</span> <span class="n">an</span> <span class="n">unbalanced</span> <span class="n">retain</span> <span class="n">or</span> <span class="n">release</span><span class="p">,</span> <span class="n">respectively</span><span class="p">,</span> <span class="n">is</span> <span class="n">poor</span> <span class="n">form</span><span class="p">.</span>
</span></code></pre></td></tr></table></div></figure>


<ul>
<li><a href="http://clang.llvm.org/docs/AutomaticReferenceCounting.html" title="Automatic Reference Counting">Automatic Reference Counting</a></li>
<li><a href="http://developer.apple.com/library/ios/#releasenotes/ObjectiveC/RN-TransitioningToARC/Introduction/Introduction.html#//apple_ref/doc/uid/TP40011226" title="Transitioning to ARC Release Notes">Transitioning to ARC Release Notes</a></li>
<li><a href="http://www.mikeash.com/pyblog/friday-qa-2011-09-30-automatic-reference-counting.html" title="Q&amp;A 2011-09-30: Automatic Reference Counting">Q&amp;A 2011-09-30: Automatic Reference Counting</a></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Ruby 程式語言摘要]]></title>
    <link href="http://bcswlmpke.github.io/blog/2012/04/24/ruby-language/"/>
    <updated>2012-04-24T21:33:00+08:00</updated>
    <id>http://bcswlmpke.github.io/blog/2012/04/24/ruby-language</id>
    <content type="html"><![CDATA[<h3>基本觀念</h3>

<ul>
<li>load 與 require

<ul>
<li><code>load</code>: 是一個方法，所以可放在判斷式中，每載入 .rb 一次，就會重新執行 .rb 的內容，可指定相對或絕對路徑</li>
<li><code>require</code>: 使用時可不加上 .rb 副檔名。與 load 不同的是，載入過的檔案，再次 require 並不會重複執行。</li>
<li><code>$:</code> 表示預設路徑 (當不指定路徑或指定相對路徑時，從預設路徑尋找)；必要時，可在啟用 ruby 時加上 -I 指定路徑</li>
</ul>
</li>
</ul>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'>  <span class="nb">load</span> <span class="s2">&quot;../core.rb&quot;</span>
</span><span class='line'>  <span class="nb">load</span> <span class="s2">&quot;C:/workspace/core.rb&quot;</span>
</span></code></pre></td></tr></table></div></figure>


<!-- more -->


<hr />

<ul>
<li>基本輸入輸出

<ul>
<li><code>ARGV</code>: 使用者輸入的命令列引數，會收集成字串陣列給 ARGV</li>
<li><code>#{}</code>: 括號內指定變數名稱，直譯器會取得變數值</li>
<li>預設輸出是 STDOUT，標準錯誤輸出是 STDERR，透過 STDERR.class 可知道是屬於 IO Class</li>
<li><code>gets</code>: 此方法取得使用者輸入，含換行字元；如果要拿掉字串前後的空白字元(像是換行字元)，可透過字串物件的chomp</li>
<li>print, puts, printf(格式化輸出, 與C類似)</li>
<li>sprintf 用來格式化字串</li>
<li>格式化字串的另一種方式：透過%與陣列</li>
<li>透過 to_i, to_f 可轉換字串為整數、浮點數; 也可以透過 Integer, Float</li>
<li>gets 是從標準輸入 STDIN 取得字串，讀取檔案，要用 File.read</li>
<li>File.read 會一次讀取檔案中的所有內容，逐行讀取要用 open</li>
</ul>
</li>
</ul>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'>  <span class="n">filename</span> <span class="o">=</span> <span class="nb">gets</span><span class="o">.</span><span class="n">chomp</span>
</span><span class='line'>  <span class="nb">open</span><span class="p">(</span><span class="nb">name</span><span class="p">,</span> <span class="s2">&quot;w&quot;</span><span class="p">)</span> <span class="k">do</span> <span class="o">|</span><span class="n">file</span><span class="o">|</span>
</span><span class='line'>    <span class="n">file</span><span class="o">.</span><span class="n">print</span> <span class="s2">&quot;test&quot;</span>
</span><span class='line'>  <span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<hr />

<h3>內建型態與操作</h3>

<ul>
<li>數值型態

<ul>
<li>Numeric 的子類別有 Integer, Float</li>
<li>Integer 又包含 Fixnum, Bignum</li>
<li>0b, 0, 0x</li>
<li>如果整數超過 Fixnum 會自動轉為 Bignum</li>
<li>字串、浮點數的 to_i 方法可建立整數；字串的to_i可指定2~36為基底</li>
<li>字串、整數的 to_f 方法可建立浮點數</li>
<li>rounding error 可透過 bigdecimal 程式庫來解決</li>
</ul>
</li>
</ul>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="mi">1</span><span class="o">.</span><span class="mi">9</span><span class="o">.</span><span class="mi">2</span><span class="n">p290</span> <span class="p">:</span><span class="mo">037</span> <span class="o">&gt;</span> <span class="s2">&quot;100&quot;</span><span class="o">.</span><span class="n">to_i</span>
</span><span class='line'> <span class="o">=&gt;</span> <span class="mi">100</span>
</span><span class='line'><span class="mi">1</span><span class="o">.</span><span class="mi">9</span><span class="o">.</span><span class="mi">2</span><span class="n">p290</span> <span class="p">:</span><span class="mo">03</span><span class="mi">8</span> <span class="o">&gt;</span> <span class="s2">&quot;100&quot;</span><span class="o">.</span><span class="n">to_i</span><span class="p">(</span><span class="mi">16</span><span class="p">)</span>
</span><span class='line'> <span class="o">=&gt;</span> <span class="mi">256</span>
</span><span class='line'><span class="mi">1</span><span class="o">.</span><span class="mi">9</span><span class="o">.</span><span class="mi">2</span><span class="n">p290</span> <span class="p">:</span><span class="mo">053</span> <span class="o">&gt;</span>   <span class="mi">0</span><span class="o">.</span><span class="mi">1</span> <span class="o">+</span> <span class="mi">0</span><span class="o">.</span><span class="mi">2</span> <span class="o">==</span> <span class="mi">0</span><span class="o">.</span><span class="mi">3</span>
</span><span class='line'> <span class="o">=&gt;</span> <span class="kp">false</span>
</span></code></pre></td></tr></table></div></figure>


<ul>
<li>字串型態

<ul>
<li>Ruby 中的字串，應該都是使用雙引號括住</li>
<li>單引號括住的字串實際上是讓我們不必撰寫\、&#34;忽略字元就可以代表\、&#8221;</li>
<li>在單引號中，除了\與&#39;之外，撰寫其它忽略字元都會被當作原始字串（Raw string）</li>
<li>雙引號字串如果包含#{}，則<code>#{}</code> 中的內容會被當程式解釋</li>
<li><code>%Q</code>: 建立雙引號字串</li>
<li><code>%q</code>: 建立單引號字串</li>
<li>在雙單引號中撰寫字串可直接換行，字串會自動加上\n</li>
<li><code>+</code>: 串接字串</li>
<li><code>*</code>: 重複字串</li>
<li>字串為可變動的，可使用 <code>&lt;&lt;</code> 在原字串後面附加字串</li>
<li><code>ord</code>:取得字元編碼</li>
<li><code>chr</code>:將編碼轉為字元</li>
<li><code>[]</code>: 可指定索引取得字元</li>
<li>[n..m]: n 起始， m 結束，含 m</li>
<li>[n&#8230;m]: n 起始，m 結束，不含 m</li>
<li>[n, length]: n 起始，取長度 length</li>
<li>字串沒!的方法表示以「新字串」傳回結果；有！的方法表示會「修改原字串」</li>
</ul>
</li>
</ul>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="mi">1</span><span class="o">.</span><span class="mi">9</span><span class="o">.</span><span class="mi">2</span><span class="n">p290</span> <span class="p">:</span><span class="mo">057</span> <span class="o">&gt;</span> <span class="nb">print</span> <span class="s1">&#39;ha\nk&#39;</span>
</span><span class='line'><span class="n">ha</span><span class="p">\</span><span class="n">nk</span> <span class="o">=&gt;</span> <span class="kp">nil</span>
</span><span class='line'><span class="mi">1</span><span class="o">.</span><span class="mi">9</span><span class="o">.</span><span class="mi">2</span><span class="n">p290</span> <span class="p">:</span><span class="mo">05</span><span class="mi">8</span> <span class="o">&gt;</span> <span class="s1">&#39;ha\nk&#39;</span>
</span><span class='line'> <span class="o">=&gt;</span> <span class="s2">&quot;ha</span><span class="se">\\</span><span class="s2">nk&quot;</span>
</span><span class='line'><span class="mi">1</span><span class="o">.</span><span class="mi">9</span><span class="o">.</span><span class="mi">2</span><span class="n">p290</span> <span class="p">:</span><span class="mo">05</span><span class="mi">9</span> <span class="o">&gt;</span> <span class="nb">print</span> <span class="s1">&#39;ha&quot;nk&#39;</span>
</span><span class='line'><span class="n">ha</span><span class="s2">&quot;nk =&gt; nil </span>
</span><span class='line'><span class="s2">1.9.2p290 :060 &gt; &#39;ha&quot;</span><span class="n">nk</span><span class="err">&#39;</span>
</span><span class='line'> <span class="o">=&gt;</span> <span class="s2">&quot;ha</span><span class="se">\&quot;</span><span class="s2">nk&quot;</span> <span class="mi">1</span><span class="o">.</span><span class="mi">9</span><span class="o">.</span><span class="mi">2</span><span class="n">p290</span> <span class="p">:</span><span class="mo">070</span> <span class="o">&gt;</span>   <span class="sx">%Q{this is a book.}</span>
</span><span class='line'> <span class="o">=&gt;</span> <span class="s2">&quot;this is a book.&quot;</span>
</span><span class='line'><span class="mi">1</span><span class="o">.</span><span class="mi">9</span><span class="o">.</span><span class="mi">2</span><span class="n">p290</span> <span class="p">:</span><span class="mo">071</span> <span class="o">&gt;</span> <span class="sx">%Q|this is a pen.|</span>
</span><span class='line'> <span class="o">=&gt;</span> <span class="s2">&quot;this is a pen.&quot;</span>
</span><span class='line'><span class="mi">1</span><span class="o">.</span><span class="mi">9</span><span class="o">.</span><span class="mi">2</span><span class="n">p290</span> <span class="p">:</span><span class="mo">072</span> <span class="o">&gt;</span> <span class="s2">&quot;hank&quot;</span><span class="o">.</span><span class="n">length</span>
</span><span class='line'> <span class="o">=&gt;</span> <span class="mi">4</span>
</span><span class='line'><span class="mi">1</span><span class="o">.</span><span class="mi">9</span><span class="o">.</span><span class="mi">2</span><span class="n">p290</span> <span class="p">:</span><span class="mo">073</span> <span class="o">&gt;</span> <span class="s2">&quot;hank&quot;</span><span class="o">.</span><span class="n">each_char</span> <span class="k">do</span> <span class="o">|</span><span class="n">c</span><span class="o">|</span>
</span><span class='line'><span class="mi">1</span><span class="o">.</span><span class="mi">9</span><span class="o">.</span><span class="mi">2</span><span class="n">p290</span> <span class="p">:</span><span class="mo">074</span> <span class="o">&gt;</span>     <span class="nb">print</span> <span class="n">c</span><span class="p">,</span> <span class="s2">&quot;-&quot;</span>
</span><span class='line'><span class="mi">1</span><span class="o">.</span><span class="mi">9</span><span class="o">.</span><span class="mi">2</span><span class="n">p290</span> <span class="p">:</span><span class="mo">075</span><span class="o">?&gt;</span>   <span class="k">end</span>
</span><span class='line'><span class="n">h</span><span class="o">-</span><span class="n">a</span><span class="o">-</span><span class="n">n</span><span class="o">-</span><span class="n">k</span><span class="o">-</span> <span class="o">=&gt;</span> <span class="s2">&quot;hank&quot;</span>
</span><span class='line'><span class="mi">1</span><span class="o">.</span><span class="mi">9</span><span class="o">.</span><span class="mi">2</span><span class="n">p290</span> <span class="p">:</span><span class="mo">076</span> <span class="o">&gt;</span> <span class="s2">&quot;hank&quot;</span> <span class="o">+</span> <span class="s2">&quot;jane&quot;</span>
</span><span class='line'> <span class="o">=&gt;</span> <span class="s2">&quot;hankjane&quot;</span>
</span><span class='line'><span class="mi">1</span><span class="o">.</span><span class="mi">9</span><span class="o">.</span><span class="mi">2</span><span class="n">p290</span> <span class="p">:</span><span class="mo">077</span> <span class="o">&gt;</span> <span class="s2">&quot;hank&quot;</span> <span class="o">*</span> <span class="mi">5</span>
</span><span class='line'> <span class="o">=&gt;</span> <span class="s2">&quot;hankhankhankhankhank&quot;</span>
</span><span class='line'><span class="mi">1</span><span class="o">.</span><span class="mi">9</span><span class="o">.</span><span class="mi">2</span><span class="n">p290</span> <span class="p">:</span><span class="mi">081</span> <span class="o">&gt;</span>   <span class="s2">&quot;A&quot;</span><span class="o">.</span><span class="n">ord</span>
</span><span class='line'> <span class="o">=&gt;</span> <span class="mi">65</span>
</span><span class='line'><span class="mi">1</span><span class="o">.</span><span class="mi">9</span><span class="o">.</span><span class="mi">2</span><span class="n">p290</span> <span class="p">:</span><span class="mi">082</span> <span class="o">&gt;</span> <span class="mi">65</span><span class="o">.</span><span class="n">chr</span>
</span><span class='line'> <span class="o">=&gt;</span> <span class="s2">&quot;A&quot;</span>
</span></code></pre></td></tr></table></div></figure>


<ul>
<li>關於編碼

<ul>
<li>字串有 encode 方法</li>
<li>STDOUT 有 set_encoding 方法</li>
<li>內部編碼、字串編碼、外部編碼</li>
<li><code>ruby -EBig5:UTF-8 test.rb</code>
前面是外部編碼、後面是內部編碼</li>
<li>字串編碼1 <code># encoding: Big5</code></li>
<li>字串編碼1 <code># coding: Big5</code></li>
<li>字串編碼1 <code># -<em>- coding: Big5 -</em>-</code></li>
</ul>
</li>
<li>符號型態</li>
</ul>


<hr />

<p>References: 1. <a href="http://caterpillar.onlyfun.net/Gossip/Ruby/index.html" title="Ruby Gossip">良葛格 Ruby Gossip</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[程式開發時，類別間存取的設計方式]]></title>
    <link href="http://bcswlmpke.github.io/blog/2012/04/01/discuss-design-pattern/"/>
    <updated>2012-04-01T18:32:00+08:00</updated>
    <id>http://bcswlmpke.github.io/blog/2012/04/01/discuss-design-pattern</id>
    <content type="html"><![CDATA[<p>在開發程式時，為了實現功能，我們需要實作一些類別彼此互相搭配，
在設計模式的領域中，提出了23種模式與6大設計原則讓我們可以遵循，
完成功能的設計方式絕對不只一種，端看設計者當時的思考方式與邏輯。</p>

<p>最近看了設計模式6大原則中的迪米特法則(最少知識原則)，
提到：在實際應用中，如果一個類別需要跳轉兩次以上才能存取到另一個
類別，就需要想辦法進行重構了！</p>

<p>我發現自己在未接觸設計模式前，自己常用下面的幾種方式對類別間的存取
進行設計，程式碼的例子大致說明了設計的想法，
想跟大家討論怎樣的設計方式或流程可以讓類別間的存取更有效率！</p>

<ul>
<li>方式1: B類別不認識A類別，但需要存取A類別中的資訊。</li>
</ul>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'><span class="k">@protocol</span> <span class="nc">IData</span>
</span><span class='line'>
</span><span class='line'><span class="o">-</span> <span class="p">(</span><span class="kt">id</span><span class="p">)</span><span class="nl">getData:</span><span class="p">(</span><span class="n">Enum</span><span class="p">)</span><span class="n">enumType</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="k">@end</span>
</span><span class='line'>
</span><span class='line'><span class="k">@interface</span> <span class="nc">A</span> : <span class="nc">NSObject</span> <span class="o">&lt;</span><span class="n">IData</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="k">@end</span>
</span><span class='line'>
</span><span class='line'><span class="err">@</span><span class="n">interface</span> <span class="n">B</span> <span class="o">:</span> <span class="n">NSObject</span>
</span><span class='line'>
</span><span class='line'><span class="k">@property</span> <span class="p">(</span><span class="n">nonatomic</span><span class="p">,</span> <span class="n">assign</span><span class="p">)</span> <span class="kt">id</span><span class="o">&lt;</span><span class="n">IData</span><span class="o">&gt;</span> <span class="n">pData</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="k">@end</span>
</span></code></pre></td></tr></table></div></figure>


<ul>
<li>說明

<ul>
<li>A類別實作 IData 介面</li>
<li>B類別不認識 A類別，只認識介面 IData</li>
<li>不讓B類別直接認識A類別，未來任何類別只要實作了介面IData，B類別的程式都不必修改</li>
<li>我覺得這種作法適用在撰寫的類別是提供給他人使用的情況，需要考慮未來程式的可維護性、重複使用以及擴充性。</li>
<li>但雖然B類別不認識A類別，只認識 IData 介面提供的程式介面 getData，但實際上 getData 的參數是一個 Enum，
表示如果要存取A類別身上不同的資訊，就要有一串 Enum 的型態，讓B類別能間接存取A類別的資訊</li>
<li>因此，如果A類別認識C類別，但B不認識A類別與C類別，只認識 IData 介面，但需要的資訊需要卻需要A類別存取C類別
身上的資訊才能提供，會變成 B -> IData -> A -> C 這樣跳轉兩次才能存取到另一個類別</li>
</ul>
</li>
</ul>


<hr />

<ul>
<li>方式2：B類別認識A類別，用「依賴」、「聚合」、「組合」、「關聯」的方式設計</li>
</ul>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'><span class="k">@interface</span> <span class="nc">DataMgr</span> : <span class="nc">NSObject</span>
</span><span class='line'>
</span><span class='line'><span class="k">@end</span>
</span><span class='line'>
</span><span class='line'><span class="k">@interface</span> <span class="nc">B</span> : <span class="nc">NSObject</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'><span class="k">@private</span>
</span><span class='line'>  <span class="n">DataMgr</span> <span class="o">*</span><span class="n">_dataMgr</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="o">-</span> <span class="p">(</span><span class="kt">id</span><span class="p">)</span><span class="nl">initWithFrame:</span><span class="p">(</span><span class="n">CGRect</span><span class="p">)</span><span class="n">rect</span> <span class="nl">dataMgr:</span><span class="p">(</span><span class="n">DataMgr</span> <span class="o">*</span><span class="p">)</span><span class="n">pDataMgr</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="k">@end</span>
</span></code></pre></td></tr></table></div></figure>


<ul>
<li>說明

<ul>
<li>在B類別初始化時，將需要的資訊傳入</li>
<li>如果B類別所需要的資訊只是暫時性的，可以用「依賴」的方式設計，當參數傳入後，
在函式內處理完畢就不再需要了</li>
<li>如果B類別需要的是後續還會再進行操作的資訊，則用「聚合」、「組合」、「關聯」的方式，
在其內部透過一個指標來操作，或是將傳入的資訊複製一份存在自己身上</li>
</ul>
</li>
</ul>


<hr />

<ul>
<li>方式3：B類別繼承A類別</li>
</ul>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'><span class="k">@interface</span> <span class="nc">BaseDataMgr</span> : <span class="nc">NSObject</span>
</span><span class='line'>
</span><span class='line'><span class="o">-</span> <span class="p">(</span><span class="kt">BOOL</span><span class="p">)</span><span class="nl">addUserData:</span><span class="p">(</span><span class="n">EnumUserData</span><span class="p">)</span><span class="n">type</span> <span class="nl">params:</span><span class="p">(</span><span class="n">NSArray</span> <span class="o">*</span><span class="p">)</span><span class="n">params</span><span class="p">;</span>
</span><span class='line'><span class="o">-</span> <span class="p">(</span><span class="kt">id</span><span class="p">)</span><span class="nl">getUserData:</span><span class="p">(</span><span class="n">EnumUserData</span><span class="p">)</span><span class="n">type</span> <span class="nl">params:</span><span class="p">(</span><span class="n">NSArray</span> <span class="o">*</span><span class="p">)</span><span class="n">params</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="k">@end</span>
</span><span class='line'>
</span><span class='line'><span class="k">@interface</span> <span class="nc">MyDataMgr</span> : <span class="nc">BaseDataMgr</span>
</span><span class='line'>
</span><span class='line'><span class="o">-</span> <span class="p">(</span><span class="kt">void</span><span class="p">)</span><span class="n">functionA</span><span class="p">;</span>
</span><span class='line'><span class="o">-</span> <span class="p">(</span><span class="n">NSInteger</span><span class="p">)</span><span class="n">functionB</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="k">@end</span>
</span><span class='line'><span class="k">@interface</span> <span class="nc">A</span> : <span class="nc">NSObject</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'><span class="k">@private</span>
</span><span class='line'>  <span class="n">BaseDataMgr</span> <span class="o">*</span><span class="n">_dataMgr</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="k">@end</span>
</span></code></pre></td></tr></table></div></figure>


<ul>
<li>說明

<ul>
<li>盡量達成 Liskov Substitution Principle(LSP): 只要父類別能出現的地方，
子類別就可以出現，而且替換為子類別也不會產生任何錯誤或異常</li>
<li>當子類別不能完整作父類別的方法，或是父類別的某些方法在子類別中並不適用，
則建議採組合、聚合等方式代替繼承</li>
<li>我自己本身使用繼承時，大部份都沒有完全遵循上述的兩項原則，使用的情況大致為
A類別身上存著 BaseDataMgr 的指標，但使用時是產生 MyDataMgr 的實體，內部在使用時，
必須進行轉型 ex. [(MyDataMgr *)_dataMgr functionA] 才可操作 BaseDataMgr 不提供的方法。</li>
</ul>
</li>
</ul>


<hr />

<p>以上舉了三個例子來說明，有時候覺得某些設計的的堅持或許是太鑽牛角尖，也或許是過度設計了，
如果大家有什麼想法或建議，歡迎一起提出來討論！</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[不要相信retainCount，事實上你該怎麼做？]]></title>
    <link href="http://bcswlmpke.github.io/blog/2012/02/03/objective-c-memory-management/"/>
    <updated>2012-02-03T21:29:00+08:00</updated>
    <id>http://bcswlmpke.github.io/blog/2012/02/03/objective-c-memory-management</id>
    <content type="html"><![CDATA[<p>在還沒有擁抱 iOS 5 ARC (Automatic Reference Counting) 之前，
我們必須自己管理程式所使用的記憶體，
在開發 iOS 的過程中踩過不少地雷，
整理出一些心得用來提醒自己，
如果有錯誤也請大家幫忙指正或留言一起討論！</p>

<!-- more -->


<ul>
<li><strong>產生物件者，記得做對應的 release</strong>

<ul>
<li>new (alloc + init)</li>
<li>retain</li>
<li>copy</li>
</ul>
</li>
<li><strong>addSubView 會將 retainCount +1，有兩種處理的時機</strong></li>
</ul>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'><span class="n">UILabel</span> <span class="o">*</span><span class="n">label</span> <span class="o">=</span> <span class="p">[</span><span class="n">UILabel</span> <span class="n">alloc</span><span class="p">]</span> <span class="nl">initWithFrame:</span><span class="n">self</span><span class="p">.</span><span class="n">bounds</span><span class="p">];</span>
</span><span class='line'><span class="p">[</span><span class="n">self</span> <span class="nl">addSubView:</span><span class="n">label</span><span class="p">];</span>
</span><span class='line'><span class="p">[</span><span class="n">label</span> <span class="n">release</span><span class="p">];</span>
</span></code></pre></td></tr></table></div></figure>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'><span class="k">@implementation</span> <span class="nc">MyClass</span>
</span><span class='line'>    <span class="o">-</span> <span class="p">(</span><span class="kt">void</span><span class="p">)</span><span class="n">dealloc</span>
</span><span class='line'>    <span class="p">{</span>
</span><span class='line'>        <span class="k">if</span> <span class="p">(</span><span class="n">label</span> <span class="o">!=</span> <span class="nb">nil</span><span class="p">)</span>
</span><span class='line'>        <span class="p">{</span>
</span><span class='line'>            <span class="k">if</span> <span class="p">(</span><span class="n">label</span><span class="p">.</span><span class="n">superview</span> <span class="o">!=</span> <span class="nb">nil</span><span class="p">)</span>
</span><span class='line'>                <span class="p">[</span><span class="n">label</span> <span class="n">removeFromSuperview</span><span class="p">];</span>
</span><span class='line'>            <span class="p">[</span><span class="n">label</span> <span class="n">release</span><span class="p">];</span>
</span><span class='line'>            <span class="n">label</span> <span class="o">=</span> <span class="nb">nil</span><span class="p">;</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>        <span class="p">[</span><span class="n">super</span> <span class="n">dealloc</span><span class="p">];</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="k">@end</span>
</span></code></pre></td></tr></table></div></figure>


<ul>
<li><strong>Layer 的 Animation 或 setFrame 會暫時的增加 retainCount，直到動作完成</strong></li>
<li><strong>如果你要使用 Thread，請記得用 Autorelease Pool 幫 Thread 做記憶體管理</strong></li>
<li><strong>如果實作的類別要用 Delegate 時，Property 請記得用 assgin，如果用 retain 會造成 Circular Reference</strong></li>
</ul>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'><span class="k">@interface</span> <span class="nc">MyClass</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>  <span class="kt">id</span> <span class="n">target</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'><span class="k">@property</span> <span class="p">(</span><span class="n">nonatomic</span><span class="p">,</span> <span class="n">assgin</span><span class="p">)</span> <span class="kt">id</span> <span class="n">target</span><span class="p">;</span>
</span><span class='line'><span class="k">@end</span>
</span></code></pre></td></tr></table></div></figure>


<ul>
<li><strong>如果 Property 的屬性使用 retain，要記得 release 並設成 nil</strong></li>
</ul>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'><span class="k">@interface</span> <span class="nc">MyClass</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>  <span class="n">NSString</span> <span class="o">*</span><span class="n">name</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'><span class="k">@property</span> <span class="p">(</span><span class="n">nonatomic</span><span class="p">,</span> <span class="n">retain</span><span class="p">)</span> <span class="n">NSString</span> <span class="o">*</span><span class="n">name</span><span class="p">;</span>
</span><span class='line'><span class="k">@end</span>
</span><span class='line'><span class="k">@implementation</span> <span class="nc">MyClass</span>
</span><span class='line'><span class="o">-</span> <span class="p">(</span><span class="kt">void</span><span class="p">)</span><span class="n">dealloc</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>  <span class="n">self</span><span class="p">.</span><span class="n">name</span> <span class="o">=</span> <span class="nb">nil</span><span class="p">;</span> <span class="c1">// 等同於 [name release]; name = nil;</span>
</span><span class='line'>
</span><span class='line'>  <span class="p">[</span><span class="n">super</span> <span class="n">dealloc</span><span class="p">];</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'><span class="k">@end</span>
</span></code></pre></td></tr></table></div></figure>


<blockquote><p>更詳細的說明可以參考官方文件：<a href="https://developer.apple.com/library/mac/#documentation/Cocoa/Conceptual/MemoryMgmt/Articles/MemoryMgmt.html" title="About Memory Management">About Memory Management</a></p></blockquote>
]]></content>
  </entry>
  
</feed>
