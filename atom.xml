<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Hank 學習筆記]]></title>
  <link href="http://bcswlmpke.github.com/atom.xml" rel="self"/>
  <link href="http://bcswlmpke.github.com/"/>
  <updated>2012-05-01T21:36:31+08:00</updated>
  <id>http://bcswlmpke.github.com/</id>
  <author>
    <name><![CDATA[陳彥任]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[將專案轉換為ARC]]></title>
    <link href="http://bcswlmpke.github.com/blog/2012/05/01/convert-to-arc/"/>
    <updated>2012-05-01T20:28:00+08:00</updated>
    <id>http://bcswlmpke.github.com/blog/2012/05/01/convert-to-arc</id>
    <content type="html"><![CDATA[<h3>Automatic Reference Counting</h3>

<ul>
<li>ARC

<ul>
<li>XCode 4.2 開始支援</li>
<li>Preferences > General > enable Continue building after errors</li>
<li>Edit > Refactor > Convert to Objective-C ARC</li>
<li>using the Apple LLVM compiler</li>
<li>如果轉換失敗，會提供錯誤訊息，等手動修正後，就可以重新啟動 Refactor ARC-conversion workflow
<img src="http://farm8.staticflickr.com/7238/7131702787_9e4cdfcfe1_z.jpg" title="Convert to ARC dialog" alt="Convert to ARC dialog" /></li>
<li>轉換成功後，你可以 review automatic changes，也可以做 snapshot 供之後回復(如果有需要)，然後選擇 Save

<h3>將手上的專案轉成 ARC 的一些心得整理</h3></li>
<li>不想要轉換為 ARC 的 source file 可加上 <code>-fno-objc-arc</code></li>
<li>不需要自己加上 <code>retain</code>、<code>autorelease</code>、<code>release</code>、<code>[super dealloc]</code></li>
<li>Objects in the struct are unretained</li>
</ul>
</li>
</ul>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'><span class="k">typedef</span> <span class="k">struct</span> <span class="p">{</span>
</span><span class='line'>  <span class="n">__unsafe_unretained</span> <span class="n">NSString</span> <span class="o">*</span><span class="n">name</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span> <span class="n">MyStruct</span><span class="p">;</span>
</span></code></pre></td></tr></table></div></figure>


<ul>
<li>關於 weak</li>
</ul>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'><span class="n">Becase</span> <span class="n">of</span> <span class="err">「</span><span class="n">__weak</span><span class="err">」</span> <span class="n">references</span> <span class="n">only</span> <span class="n">work</span> <span class="n">on</span> <span class="n">iOS</span> <span class="mi">5</span> <span class="n">and</span> <span class="n">above</span><span class="p">.</span>
</span><span class='line'><span class="n">If</span> <span class="n">you</span> <span class="n">have</span> <span class="n">the</span> <span class="n">deployment</span> <span class="n">target</span> <span class="n">set</span> <span class="n">to</span> <span class="n">anything</span> <span class="n">earlier</span><span class="p">,</span> <span class="n">then</span> <span class="n">you</span><span class="err">&#39;</span><span class="n">ll</span> <span class="n">get</span> <span class="n">the</span> <span class="n">error</span><span class="p">.</span>
</span><span class='line'><span class="n">Basically</span><span class="p">,</span> <span class="k">if</span> <span class="n">you</span> <span class="n">want</span> <span class="n">to</span> <span class="n">deploy</span> <span class="n">to</span> <span class="n">earlier</span> <span class="n">devices</span> <span class="n">you</span> <span class="n">can</span><span class="err">&#39;</span><span class="n">t</span> <span class="n">use</span> <span class="n">automated</span> <span class="err">「</span><span class="n">__weak</span><span class="err">」</span> <span class="n">references</span><span class="p">.</span>
</span><span class='line'><span class="n">The</span> <span class="n">substitute</span> <span class="n">would</span> <span class="n">be</span> <span class="err">「</span><span class="n">__unsafe_unretained</span><span class="err">」</span><span class="p">.</span>
</span></code></pre></td></tr></table></div></figure>


<ul>
<li>NSAutoreleasePool 要修改如下</li>
</ul>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'>  <span class="p">[</span><span class="n">Before</span><span class="p">]</span>
</span><span class='line'>    <span class="n">NSAutoreleasePool</span> <span class="o">*</span> <span class="n">pool</span> <span class="o">=</span> <span class="p">[[</span><span class="n">NSAutoreleasePool</span> <span class="n">alloc</span><span class="p">]</span> <span class="n">init</span><span class="p">];</span>
</span><span class='line'>    <span class="p">[</span><span class="n">pool</span> <span class="n">drain</span><span class="p">];</span>
</span><span class='line'>  <span class="p">[</span><span class="n">After</span><span class="p">]</span>
</span><span class='line'>    <span class="err">@</span><span class="n">autoreleasepool</span> <span class="p">{</span>
</span><span class='line'>    <span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<ul>
<li>cast of C pointer type &#8216;void <em>&#8217; to Objective-C pointer type &#8216;NSObject </em>&#8217; requires a bridged cast <code>__bridge</code></li>
</ul>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'>  <span class="n">NSObject</span><span class="o">*</span> <span class="n">myObject</span> <span class="o">=</span> <span class="p">[[</span><span class="n">NSObject</span> <span class="n">alloc</span><span class="p">]</span> <span class="n">init</span><span class="p">];</span>
</span><span class='line'>  <span class="kt">void</span><span class="o">*</span> <span class="n">myObjectPointer</span> <span class="o">=</span> <span class="p">(</span><span class="n">__bridge</span> <span class="kt">void</span><span class="o">*</span><span class="p">)</span><span class="n">myObject</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>  <span class="kt">void</span><span class="o">*</span> <span class="n">myObjectPointer2</span> <span class="o">=</span> <span class="nb">NULL</span><span class="p">;</span>
</span><span class='line'>  <span class="n">NSObject</span><span class="o">*</span> <span class="n">myObject2</span> <span class="o">=</span> <span class="p">(</span><span class="n">__bridge</span> <span class="n">NSObject</span><span class="o">*</span><span class="p">)</span><span class="n">myObjectPointer2</span><span class="p">;</span>
</span></code></pre></td></tr></table></div></figure>


<ul>
<li>assign retained object to unsafe_unretained variable, object will be released after assignment</li>
</ul>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'>  <span class="err">請在</span> <span class="k">@property</span> <span class="err">加上</span> <span class="n">strong</span>
</span><span class='line'>  <span class="err">或是在變數名稱前加上</span> <span class="n">__strong</span>
</span></code></pre></td></tr></table></div></figure>


<ul>
<li>發生 leaking 怎麼辦？</li>
</ul>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'>  <span class="err">如果發生類似</span> <span class="o">***</span> <span class="n">__NSAutoreleaseNoPool</span><span class="p">()</span><span class="o">:</span> <span class="n">Object</span> <span class="mh">0x648ad80</span> <span class="n">of</span> <span class="n">class</span> <span class="n">NSCFString</span> <span class="n">autoreleased</span> <span class="n">with</span> <span class="n">no</span> <span class="n">pool</span> <span class="k">in</span> <span class="n">place</span> <span class="o">-</span> <span class="n">just</span> <span class="n">leaking</span> <span class="err">的訊息，</span>
</span><span class='line'>  <span class="err">可以透過</span> <span class="n">Profile</span> <span class="o">-&gt;</span> <span class="n">Leak</span> <span class="n">Tool</span> <span class="err">找出有問題的地方</span>
</span></code></pre></td></tr></table></div></figure>


<ul>
<li>如果是 static method 回傳一個物件，要怎麼釋放？(以 C 所產生的物件為例)</li>
</ul>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'>  <span class="n">CFUUIDRef</span> <span class="n">theUUID</span> <span class="o">=</span> <span class="n">CFUUIDCreate</span><span class="p">(</span><span class="nb">NULL</span><span class="p">);</span>
</span><span class='line'>  <span class="n">CFStringRef</span> <span class="n">strUUID</span> <span class="o">=</span> <span class="n">CFUUIDCreateString</span><span class="p">(</span><span class="nb">NULL</span><span class="p">,</span> <span class="n">theUUID</span><span class="p">);</span>
</span><span class='line'>  <span class="n">CFRelease</span><span class="p">(</span><span class="n">theUUID</span><span class="p">);</span>
</span><span class='line'>  
</span><span class='line'>  <span class="k">return</span> <span class="p">(</span><span class="n">__bridge_transfer</span> <span class="n">NSString</span> <span class="o">*</span><span class="p">)</span><span class="n">strUUID</span><span class="p">;</span> <span class="c1">// 釋放原先所有權，將所有權交給 ARC </span>
</span></code></pre></td></tr></table></div></figure>


<ul>
<li>id array member instance under ARC</li>
</ul>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'><span class="kt">id</span><span class="o">&lt;</span><span class="n">ITest</span><span class="o">&gt;</span> <span class="n">__strong</span> <span class="o">*</span><span class="n">iArray</span> <span class="o">=</span> <span class="nb">nil</span><span class="p">;</span>
</span><span class='line'><span class="n">iArray</span> <span class="o">=</span> <span class="p">(</span><span class="kt">id</span><span class="o">&lt;</span><span class="n">ITest</span><span class="o">&gt;</span> <span class="n">__strong</span> <span class="o">*</span><span class="p">)</span><span class="n">calloc</span><span class="p">(</span><span class="k">sizeof</span><span class="p">(</span><span class="kt">id</span><span class="o">&lt;</span><span class="n">ITest</span><span class="o">&gt;</span><span class="p">),</span> <span class="n">Size</span><span class="p">);</span>
</span></code></pre></td></tr></table></div></figure>


<h3>一些不錯的參考連結</h3>

<ul>
<li>Property declarations</li>
</ul>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'><span class="err">「</span><span class="n">assign</span><span class="err">」</span> <span class="n">implies</span> <span class="err">「</span><span class="n">__unsafe_unretained</span><span class="err">」</span><span class="n">ownership</span><span class="p">.</span>
</span><span class='line'><span class="err">「</span><span class="n">copy</span><span class="err">」</span> <span class="n">implies</span> <span class="err">「</span><span class="n">__strong</span><span class="err">」</span> <span class="n">ownership</span><span class="p">,</span> <span class="n">as</span> <span class="n">well</span> <span class="n">as</span> <span class="n">the</span> <span class="n">usual</span> <span class="n">behavior</span> <span class="n">of</span> <span class="n">copy</span> <span class="n">semantics</span> <span class="n">on</span> <span class="n">the</span> <span class="n">setter</span><span class="p">.</span>
</span><span class='line'><span class="err">「</span><span class="n">retain</span><span class="err">」</span> <span class="n">implies</span> <span class="err">「</span><span class="n">__strong</span><span class="err">」</span> <span class="n">ownership</span><span class="p">.</span>
</span><span class='line'><span class="err">「</span><span class="n">strong</span><span class="err">」</span> <span class="n">implies</span> <span class="err">「</span><span class="n">__strong</span><span class="err">」</span> <span class="n">ownership</span><span class="p">.</span>
</span><span class='line'><span class="err">「</span><span class="n">unsafe_unretained</span><span class="err">」</span> <span class="n">implies</span> <span class="err">「</span><span class="n">__unsafe_unretained</span><span class="err">」</span> <span class="n">ownership</span><span class="p">.</span>
</span><span class='line'><span class="n">weak</span> <span class="n">implies</span> <span class="n">__weak</span> <span class="n">ownership</span><span class="p">.</span>
</span></code></pre></td></tr></table></div></figure>


<ul>
<li>Bridged casts</li>
</ul>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'><span class="n">A</span> <span class="n">bridged</span> <span class="n">cast</span> <span class="n">is</span> <span class="n">a</span> <span class="n">C</span><span class="o">-</span><span class="n">style</span> <span class="n">cast</span> <span class="n">annotated</span> <span class="n">with</span> <span class="n">one</span> <span class="n">of</span> <span class="n">three</span> <span class="nl">keywords:</span>
</span><span class='line'>
</span><span class='line'><span class="p">(</span><span class="n">__bridge</span> <span class="n">T</span><span class="p">)</span> <span class="n">op</span> <span class="n">casts</span> <span class="n">the</span> <span class="n">operand</span> <span class="n">to</span> <span class="n">the</span> <span class="n">destination</span> <span class="n">type</span> <span class="n">T</span><span class="p">.</span> <span class="n">If</span> <span class="n">T</span> <span class="n">is</span> <span class="n">a</span> <span class="n">retainable</span> <span class="n">object</span> <span class="n">pointer</span> <span class="n">type</span><span class="p">,</span> <span class="n">then</span> <span class="n">op</span> <span class="n">must</span> <span class="n">have</span> <span class="n">a</span> <span class="n">non</span><span class="o">-</span><span class="n">retainable</span> <span class="n">pointer</span> <span class="n">type</span><span class="p">.</span> <span class="n">If</span> <span class="n">T</span> <span class="n">is</span> <span class="n">a</span> <span class="n">non</span><span class="o">-</span><span class="n">retainable</span> <span class="n">pointer</span> <span class="n">type</span><span class="p">,</span> <span class="n">then</span> <span class="n">op</span> <span class="n">must</span> <span class="n">have</span> <span class="n">a</span> <span class="n">retainable</span> <span class="n">object</span> <span class="n">pointer</span> <span class="n">type</span><span class="p">.</span> <span class="n">Otherwise</span> <span class="n">the</span> <span class="n">cast</span> <span class="n">is</span> <span class="n">ill</span><span class="o">-</span><span class="n">formed</span><span class="p">.</span> <span class="n">There</span> <span class="n">is</span> <span class="n">no</span> <span class="n">transfer</span> <span class="n">of</span> <span class="n">ownership</span><span class="p">,</span> <span class="n">and</span> <span class="n">ARC</span> <span class="n">inserts</span> <span class="n">no</span> <span class="n">retain</span> <span class="n">operations</span><span class="p">.</span>
</span><span class='line'><span class="p">(</span><span class="n">__bridge_retained</span> <span class="n">T</span><span class="p">)</span> <span class="n">op</span> <span class="n">casts</span> <span class="n">the</span> <span class="n">operand</span><span class="p">,</span> <span class="n">which</span> <span class="n">must</span> <span class="n">have</span> <span class="n">retainable</span> <span class="n">object</span> <span class="n">pointer</span> <span class="n">type</span><span class="p">,</span> <span class="n">to</span> <span class="n">the</span> <span class="n">destination</span> <span class="n">type</span><span class="p">,</span> <span class="n">which</span> <span class="n">must</span> <span class="n">be</span> <span class="n">a</span> <span class="n">non</span><span class="o">-</span><span class="n">retainable</span> <span class="n">pointer</span> <span class="n">type</span><span class="p">.</span> <span class="n">ARC</span> <span class="n">retains</span> <span class="n">the</span> <span class="n">value</span><span class="p">,</span> <span class="n">subject</span> <span class="n">to</span> <span class="n">the</span> <span class="n">usual</span> <span class="n">optimizations</span> <span class="n">on</span> <span class="n">local</span> <span class="n">values</span><span class="p">,</span> <span class="n">and</span> <span class="n">the</span> <span class="n">recipient</span> <span class="n">is</span> <span class="n">responsible</span> <span class="k">for</span> <span class="n">balancing</span> <span class="n">that</span> <span class="o">+</span><span class="mf">1.</span>
</span><span class='line'><span class="p">(</span><span class="n">__bridge_transfer</span> <span class="n">T</span><span class="p">)</span> <span class="n">op</span> <span class="n">casts</span> <span class="n">the</span> <span class="n">operand</span><span class="p">,</span> <span class="n">which</span> <span class="n">must</span> <span class="n">have</span> <span class="n">non</span><span class="o">-</span><span class="n">retainable</span> <span class="n">pointer</span> <span class="n">type</span><span class="p">,</span> <span class="n">to</span> <span class="n">the</span> <span class="n">destination</span> <span class="n">type</span><span class="p">,</span> <span class="n">which</span> <span class="n">must</span> <span class="n">be</span> <span class="n">a</span> <span class="n">retainable</span> <span class="n">object</span> <span class="n">pointer</span> <span class="n">type</span><span class="p">.</span> <span class="n">ARC</span> <span class="n">will</span> <span class="n">release</span> <span class="n">the</span> <span class="n">value</span> <span class="n">at</span> <span class="n">the</span> <span class="n">end</span> <span class="n">of</span> <span class="n">the</span> <span class="n">enclosing</span> <span class="n">full</span><span class="o">-</span><span class="n">expression</span><span class="p">,</span> <span class="n">subject</span> <span class="n">to</span> <span class="n">the</span> <span class="n">usual</span> <span class="n">optimizations</span> <span class="n">on</span> <span class="n">local</span> <span class="n">values</span><span class="p">.</span>
</span><span class='line'>
</span><span class='line'><span class="n">Using</span> <span class="n">a</span> <span class="n">__bridge_retained</span> <span class="n">or</span> <span class="n">__bridge_transfer</span> <span class="n">cast</span> <span class="n">purely</span> <span class="n">to</span> <span class="n">convince</span> <span class="n">ARC</span> <span class="n">to</span> <span class="n">emit</span> <span class="n">an</span> <span class="n">unbalanced</span> <span class="n">retain</span> <span class="n">or</span> <span class="n">release</span><span class="p">,</span> <span class="n">respectively</span><span class="p">,</span> <span class="n">is</span> <span class="n">poor</span> <span class="n">form</span><span class="p">.</span>
</span></code></pre></td></tr></table></div></figure>


<ul>
<li><a href="http://clang.llvm.org/docs/AutomaticReferenceCounting.html" title="Automatic Reference Counting">Automatic Reference Counting</a></li>
<li><a href="http://developer.apple.com/library/ios/#releasenotes/ObjectiveC/RN-TransitioningToARC/Introduction/Introduction.html#//apple_ref/doc/uid/TP40011226" title="Transitioning to ARC Release Notes">Transitioning to ARC Release Notes</a></li>
<li><a href="http://www.mikeash.com/pyblog/friday-qa-2011-09-30-automatic-reference-counting.html" title="Q&amp;A 2011-09-30: Automatic Reference Counting">Q&amp;A 2011-09-30: Automatic Reference Counting</a></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Ruby 程式語言摘要]]></title>
    <link href="http://bcswlmpke.github.com/blog/2012/04/24/ruby-language/"/>
    <updated>2012-04-24T21:33:00+08:00</updated>
    <id>http://bcswlmpke.github.com/blog/2012/04/24/ruby-language</id>
    <content type="html"><![CDATA[<h3>基本觀念</h3>

<ul>
<li>load 與 require

<ul>
<li><code>load</code>: 是一個方法，所以可放在判斷式中，每載入 .rb 一次，就會重新執行 .rb 的內容，可指定相對或絕對路徑</li>
<li><code>require</code>: 使用時可不加上 .rb 副檔名。與 load 不同的是，載入過的檔案，再次 require 並不會重複執行。</li>
<li><code>$:</code> 表示預設路徑 (當不指定路徑或指定相對路徑時，從預設路徑尋找)；必要時，可在啟用 ruby 時加上 -I 指定路徑</li>
</ul>
</li>
</ul>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'>  <span class="nb">load</span> <span class="s2">&quot;../core.rb&quot;</span>
</span><span class='line'>  <span class="nb">load</span> <span class="s2">&quot;C:/workspace/core.rb&quot;</span>
</span></code></pre></td></tr></table></div></figure>


<hr />

<ul>
<li>基本輸入輸出

<ul>
<li><code>ARGV</code>: 使用者輸入的命令列引數，會收集成字串陣列給 ARGV</li>
<li><code>#{}</code>: 括號內指定變數名稱，直譯器會取得變數值</li>
<li>預設輸出是 STDOUT，標準錯誤輸出是 STDERR，透過 STDERR.class 可知道是屬於 IO Class</li>
<li><code>gets</code>: 此方法取得使用者輸入，含換行字元；如果要拿掉字串前後的空白字元(像是換行字元)，可透過字串物件的chomp</li>
<li>print, puts, printf(格式化輸出, 與C類似)</li>
<li>sprintf 用來格式化字串</li>
<li>格式化字串的另一種方式：透過%與陣列</li>
<li>透過 to_i, to_f 可轉換字串為整數、浮點數; 也可以透過 Integer, Float</li>
<li>gets 是從標準輸入 STDIN 取得字串，讀取檔案，要用 File.read</li>
<li>File.read 會一次讀取檔案中的所有內容，逐行讀取要用 open</li>
</ul>
</li>
</ul>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'>  <span class="n">filename</span> <span class="o">=</span> <span class="nb">gets</span><span class="o">.</span><span class="n">chomp</span>
</span><span class='line'>  <span class="nb">open</span><span class="p">(</span><span class="nb">name</span><span class="p">,</span> <span class="s2">&quot;w&quot;</span><span class="p">)</span> <span class="k">do</span> <span class="o">|</span><span class="n">file</span><span class="o">|</span>
</span><span class='line'>    <span class="n">file</span><span class="o">.</span><span class="n">print</span> <span class="s2">&quot;test&quot;</span>
</span><span class='line'>  <span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<hr />

<h3>內建型態與操作</h3>

<ul>
<li>數值型態

<ul>
<li>Numeric 的子類別有 Integer, Float</li>
<li>Integer 又包含 Fixnum, Bignum</li>
<li>0b, 0, 0x</li>
<li>如果整數超過 Fixnum 會自動轉為 Bignum</li>
<li>字串、浮點數的 to_i 方法可建立整數；字串的to_i可指定2~36為基底</li>
<li>字串、整數的 to_f 方法可建立浮點數</li>
<li>rounding error 可透過 bigdecimal 程式庫來解決</li>
</ul>
</li>
</ul>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="mi">1</span><span class="o">.</span><span class="mi">9</span><span class="o">.</span><span class="mi">2</span><span class="n">p290</span> <span class="p">:</span><span class="mo">037</span> <span class="o">&gt;</span> <span class="s2">&quot;100&quot;</span><span class="o">.</span><span class="n">to_i</span>
</span><span class='line'> <span class="o">=&gt;</span> <span class="mi">100</span>
</span><span class='line'><span class="mi">1</span><span class="o">.</span><span class="mi">9</span><span class="o">.</span><span class="mi">2</span><span class="n">p290</span> <span class="p">:</span><span class="mo">03</span><span class="mi">8</span> <span class="o">&gt;</span> <span class="s2">&quot;100&quot;</span><span class="o">.</span><span class="n">to_i</span><span class="p">(</span><span class="mi">16</span><span class="p">)</span>
</span><span class='line'> <span class="o">=&gt;</span> <span class="mi">256</span>
</span><span class='line'><span class="mi">1</span><span class="o">.</span><span class="mi">9</span><span class="o">.</span><span class="mi">2</span><span class="n">p290</span> <span class="p">:</span><span class="mo">053</span> <span class="o">&gt;</span>   <span class="mi">0</span><span class="o">.</span><span class="mi">1</span> <span class="o">+</span> <span class="mi">0</span><span class="o">.</span><span class="mi">2</span> <span class="o">==</span> <span class="mi">0</span><span class="o">.</span><span class="mi">3</span>
</span><span class='line'> <span class="o">=&gt;</span> <span class="kp">false</span>
</span></code></pre></td></tr></table></div></figure>


<ul>
<li>字串型態

<ul>
<li>Ruby 中的字串，應該都是使用雙引號括住</li>
<li>單引號括住的字串實際上是讓我們不必撰寫\、&#34;忽略字元就可以代表\、&#8221;</li>
<li>在單引號中，除了\與&#39;之外，撰寫其它忽略字元都會被當作原始字串（Raw string）</li>
<li>雙引號字串如果包含#{}，則<code>#{}</code> 中的內容會被當程式解釋</li>
<li><code>%Q</code>: 建立雙引號字串</li>
<li><code>%q</code>: 建立單引號字串</li>
<li>在雙單引號中撰寫字串可直接換行，字串會自動加上\n</li>
<li><code>+</code>: 串接字串</li>
<li><code>*</code>: 重複字串</li>
<li>字串為可變動的，可使用 <code>&lt;&lt;</code> 在原字串後面附加字串</li>
<li><code>ord</code>:取得字元編碼</li>
<li><code>chr</code>:將編碼轉為字元</li>
<li><code>[]</code>: 可指定索引取得字元</li>
<li>[n..m]: n 起始， m 結束，含 m</li>
<li>[n&#8230;m]: n 起始，m 結束，不含 m</li>
<li>[n, length]: n 起始，取長度 length</li>
<li>字串沒!的方法表示以「新字串」傳回結果；有！的方法表示會「修改原字串」</li>
</ul>
</li>
</ul>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="mi">1</span><span class="o">.</span><span class="mi">9</span><span class="o">.</span><span class="mi">2</span><span class="n">p290</span> <span class="p">:</span><span class="mo">057</span> <span class="o">&gt;</span> <span class="nb">print</span> <span class="s1">&#39;ha\nk&#39;</span>
</span><span class='line'><span class="n">ha</span><span class="p">\</span><span class="n">nk</span> <span class="o">=&gt;</span> <span class="kp">nil</span>
</span><span class='line'><span class="mi">1</span><span class="o">.</span><span class="mi">9</span><span class="o">.</span><span class="mi">2</span><span class="n">p290</span> <span class="p">:</span><span class="mo">05</span><span class="mi">8</span> <span class="o">&gt;</span> <span class="s1">&#39;ha\nk&#39;</span>
</span><span class='line'> <span class="o">=&gt;</span> <span class="s2">&quot;ha</span><span class="se">\\</span><span class="s2">nk&quot;</span>
</span><span class='line'><span class="mi">1</span><span class="o">.</span><span class="mi">9</span><span class="o">.</span><span class="mi">2</span><span class="n">p290</span> <span class="p">:</span><span class="mo">05</span><span class="mi">9</span> <span class="o">&gt;</span> <span class="nb">print</span> <span class="s1">&#39;ha&quot;nk&#39;</span>
</span><span class='line'><span class="n">ha</span><span class="s2">&quot;nk =&gt; nil </span>
</span><span class='line'><span class="s2">1.9.2p290 :060 &gt; &#39;ha&quot;</span><span class="n">nk</span><span class="err">&#39;</span>
</span><span class='line'> <span class="o">=&gt;</span> <span class="s2">&quot;ha</span><span class="se">\&quot;</span><span class="s2">nk&quot;</span> <span class="mi">1</span><span class="o">.</span><span class="mi">9</span><span class="o">.</span><span class="mi">2</span><span class="n">p290</span> <span class="p">:</span><span class="mo">070</span> <span class="o">&gt;</span>   <span class="sx">%Q{this is a book.}</span>
</span><span class='line'> <span class="o">=&gt;</span> <span class="s2">&quot;this is a book.&quot;</span>
</span><span class='line'><span class="mi">1</span><span class="o">.</span><span class="mi">9</span><span class="o">.</span><span class="mi">2</span><span class="n">p290</span> <span class="p">:</span><span class="mo">071</span> <span class="o">&gt;</span> <span class="sx">%Q|this is a pen.|</span>
</span><span class='line'> <span class="o">=&gt;</span> <span class="s2">&quot;this is a pen.&quot;</span>
</span><span class='line'><span class="mi">1</span><span class="o">.</span><span class="mi">9</span><span class="o">.</span><span class="mi">2</span><span class="n">p290</span> <span class="p">:</span><span class="mo">072</span> <span class="o">&gt;</span> <span class="s2">&quot;hank&quot;</span><span class="o">.</span><span class="n">length</span>
</span><span class='line'> <span class="o">=&gt;</span> <span class="mi">4</span>
</span><span class='line'><span class="mi">1</span><span class="o">.</span><span class="mi">9</span><span class="o">.</span><span class="mi">2</span><span class="n">p290</span> <span class="p">:</span><span class="mo">073</span> <span class="o">&gt;</span> <span class="s2">&quot;hank&quot;</span><span class="o">.</span><span class="n">each_char</span> <span class="k">do</span> <span class="o">|</span><span class="n">c</span><span class="o">|</span>
</span><span class='line'><span class="mi">1</span><span class="o">.</span><span class="mi">9</span><span class="o">.</span><span class="mi">2</span><span class="n">p290</span> <span class="p">:</span><span class="mo">074</span> <span class="o">&gt;</span>     <span class="nb">print</span> <span class="n">c</span><span class="p">,</span> <span class="s2">&quot;-&quot;</span>
</span><span class='line'><span class="mi">1</span><span class="o">.</span><span class="mi">9</span><span class="o">.</span><span class="mi">2</span><span class="n">p290</span> <span class="p">:</span><span class="mo">075</span><span class="o">?&gt;</span>   <span class="k">end</span>
</span><span class='line'><span class="n">h</span><span class="o">-</span><span class="n">a</span><span class="o">-</span><span class="n">n</span><span class="o">-</span><span class="n">k</span><span class="o">-</span> <span class="o">=&gt;</span> <span class="s2">&quot;hank&quot;</span>
</span><span class='line'><span class="mi">1</span><span class="o">.</span><span class="mi">9</span><span class="o">.</span><span class="mi">2</span><span class="n">p290</span> <span class="p">:</span><span class="mo">076</span> <span class="o">&gt;</span> <span class="s2">&quot;hank&quot;</span> <span class="o">+</span> <span class="s2">&quot;jane&quot;</span>
</span><span class='line'> <span class="o">=&gt;</span> <span class="s2">&quot;hankjane&quot;</span>
</span><span class='line'><span class="mi">1</span><span class="o">.</span><span class="mi">9</span><span class="o">.</span><span class="mi">2</span><span class="n">p290</span> <span class="p">:</span><span class="mo">077</span> <span class="o">&gt;</span> <span class="s2">&quot;hank&quot;</span> <span class="o">*</span> <span class="mi">5</span>
</span><span class='line'> <span class="o">=&gt;</span> <span class="s2">&quot;hankhankhankhankhank&quot;</span>
</span><span class='line'><span class="mi">1</span><span class="o">.</span><span class="mi">9</span><span class="o">.</span><span class="mi">2</span><span class="n">p290</span> <span class="p">:</span><span class="mi">081</span> <span class="o">&gt;</span>   <span class="s2">&quot;A&quot;</span><span class="o">.</span><span class="n">ord</span>
</span><span class='line'> <span class="o">=&gt;</span> <span class="mi">65</span>
</span><span class='line'><span class="mi">1</span><span class="o">.</span><span class="mi">9</span><span class="o">.</span><span class="mi">2</span><span class="n">p290</span> <span class="p">:</span><span class="mi">082</span> <span class="o">&gt;</span> <span class="mi">65</span><span class="o">.</span><span class="n">chr</span>
</span><span class='line'> <span class="o">=&gt;</span> <span class="s2">&quot;A&quot;</span>
</span></code></pre></td></tr></table></div></figure>


<ul>
<li>關於編碼</li>
</ul>


<hr />

<p>References: 1. <a href="http://caterpillar.onlyfun.net/Gossip/Ruby/index.html" title="Ruby Gossip">良葛格 Ruby Gossip</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[程式開發時，類別間存取的設計方式]]></title>
    <link href="http://bcswlmpke.github.com/blog/2012/04/01/discuss-design-pattern/"/>
    <updated>2012-04-01T18:32:00+08:00</updated>
    <id>http://bcswlmpke.github.com/blog/2012/04/01/discuss-design-pattern</id>
    <content type="html"><![CDATA[<p>在開發程式時，為了實現功能，我們需要實作一些類別彼此互相搭配，
在設計模式的領域中，提出了23種模式與6大設計原則讓我們可以遵循，
完成功能的設計方式絕對不只一種，端看設計者當時的思考方式與邏輯。</p>

<p>最近看了設計模式6大原則中的迪米特法則(最少知識原則)，
提到：在實際應用中，如果一個類別需要跳轉兩次以上才能存取到另一個
類別，就需要想辦法進行重構了！</p>

<p>我發現自己在未接觸設計模式前，自己常用下面的幾種方式對類別間的存取
進行設計，程式碼的例子大致說明了設計的想法，
想跟大家討論怎樣的設計方式或流程可以讓類別間的存取更有效率！</p>

<ul>
<li>方式1: B類別不認識A類別，但需要存取A類別中的資訊。</li>
</ul>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'><span class="k">@protocol</span> <span class="nc">IData</span>
</span><span class='line'>
</span><span class='line'><span class="o">-</span> <span class="p">(</span><span class="kt">id</span><span class="p">)</span><span class="nl">getData:</span><span class="p">(</span><span class="n">Enum</span><span class="p">)</span><span class="n">enumType</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="k">@end</span>
</span><span class='line'>
</span><span class='line'><span class="k">@interface</span> <span class="nc">A</span> : <span class="nc">NSObject</span> <span class="o">&lt;</span><span class="n">IData</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="k">@end</span>
</span><span class='line'>
</span><span class='line'><span class="err">@</span><span class="n">interface</span> <span class="n">B</span> <span class="o">:</span> <span class="n">NSObject</span>
</span><span class='line'>
</span><span class='line'><span class="k">@property</span> <span class="p">(</span><span class="n">nonatomic</span><span class="p">,</span> <span class="n">assign</span><span class="p">)</span> <span class="kt">id</span><span class="o">&lt;</span><span class="n">IData</span><span class="o">&gt;</span> <span class="n">pData</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="k">@end</span>
</span></code></pre></td></tr></table></div></figure>


<ul>
<li>說明

<ul>
<li>A類別實作 IData 介面</li>
<li>B類別不認識 A類別，只認識介面 IData</li>
<li>不讓B類別直接認識A類別，未來任何類別只要實作了介面IData，B類別的程式都不必修改</li>
<li>我覺得這種作法適用在撰寫的類別是提供給他人使用的情況，需要考慮未來程式的可維護性、重複使用以及擴充性。</li>
<li>但雖然B類別不認識A類別，只認識 IData 介面提供的程式介面 getData，但實際上 getData 的參數是一個 Enum，
表示如果要存取A類別身上不同的資訊，就要有一串 Enum 的型態，讓B類別能間接存取A類別的資訊</li>
<li>因此，如果A類別認識C類別，但B不認識A類別與C類別，只認識 IData 介面，但需要的資訊需要卻需要A類別存取C類別
身上的資訊才能提供，會變成 B -> IData -> A -> C 這樣跳轉兩次才能存取到另一個類別</li>
</ul>
</li>
</ul>


<hr />

<ul>
<li>方式2：B類別認識A類別，用「依賴」、「聚合」、「組合」、「關聯」的方式設計</li>
</ul>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'><span class="k">@interface</span> <span class="nc">DataMgr</span> : <span class="nc">NSObject</span>
</span><span class='line'>
</span><span class='line'><span class="k">@end</span>
</span><span class='line'>
</span><span class='line'><span class="k">@interface</span> <span class="nc">B</span> : <span class="nc">NSObject</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'><span class="k">@private</span>
</span><span class='line'>  <span class="n">DataMgr</span> <span class="o">*</span><span class="n">_dataMgr</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="o">-</span> <span class="p">(</span><span class="kt">id</span><span class="p">)</span><span class="nl">initWithFrame:</span><span class="p">(</span><span class="n">CGRect</span><span class="p">)</span><span class="n">rect</span> <span class="nl">dataMgr:</span><span class="p">(</span><span class="n">DataMgr</span> <span class="o">*</span><span class="p">)</span><span class="n">pDataMgr</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="k">@end</span>
</span></code></pre></td></tr></table></div></figure>


<ul>
<li>說明

<ul>
<li>在B類別初始化時，將需要的資訊傳入</li>
<li>如果B類別所需要的資訊只是暫時性的，可以用「依賴」的方式設計，當參數傳入後，
在函式內處理完畢就不再需要了</li>
<li>如果B類別需要的是後續還會再進行操作的資訊，則用「聚合」、「組合」、「關聯」的方式，
在其內部透過一個指標來操作，或是將傳入的資訊複製一份存在自己身上</li>
</ul>
</li>
</ul>


<hr />

<ul>
<li>方式3：B類別繼承A類別</li>
</ul>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'><span class="k">@interface</span> <span class="nc">BaseDataMgr</span> : <span class="nc">NSObject</span>
</span><span class='line'>
</span><span class='line'><span class="o">-</span> <span class="p">(</span><span class="kt">BOOL</span><span class="p">)</span><span class="nl">addUserData:</span><span class="p">(</span><span class="n">EnumUserData</span><span class="p">)</span><span class="n">type</span> <span class="nl">params:</span><span class="p">(</span><span class="n">NSArray</span> <span class="o">*</span><span class="p">)</span><span class="n">params</span><span class="p">;</span>
</span><span class='line'><span class="o">-</span> <span class="p">(</span><span class="kt">id</span><span class="p">)</span><span class="nl">getUserData:</span><span class="p">(</span><span class="n">EnumUserData</span><span class="p">)</span><span class="n">type</span> <span class="nl">params:</span><span class="p">(</span><span class="n">NSArray</span> <span class="o">*</span><span class="p">)</span><span class="n">params</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="k">@end</span>
</span><span class='line'>
</span><span class='line'><span class="k">@interface</span> <span class="nc">MyDataMgr</span> : <span class="nc">BaseDataMgr</span>
</span><span class='line'>
</span><span class='line'><span class="o">-</span> <span class="p">(</span><span class="kt">void</span><span class="p">)</span><span class="n">functionA</span><span class="p">;</span>
</span><span class='line'><span class="o">-</span> <span class="p">(</span><span class="n">NSInteger</span><span class="p">)</span><span class="n">functionB</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="k">@end</span>
</span><span class='line'><span class="k">@interface</span> <span class="nc">A</span> : <span class="nc">NSObject</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'><span class="k">@private</span>
</span><span class='line'>  <span class="n">BaseDataMgr</span> <span class="o">*</span><span class="n">_dataMgr</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="k">@end</span>
</span></code></pre></td></tr></table></div></figure>


<ul>
<li>說明

<ul>
<li>盡量達成 Liskov Substitution Principle(LSP): 只要父類別能出現的地方，
子類別就可以出現，而且替換為子類別也不會產生任何錯誤或異常</li>
<li>當子類別不能完整作父類別的方法，或是父類別的某些方法在子類別中並不適用，
則建議採組合、聚合等方式代替繼承</li>
<li>我自己本身使用繼承時，大部份都沒有完全遵循上述的兩項原則，使用的情況大致為
A類別身上存著 BaseDataMgr 的指標，但使用時是產生 MyDataMgr 的實體，內部在使用時，
必須進行轉型 ex. [(MyDataMgr *)_dataMgr functionA] 才可操作 BaseDataMgr 不提供的方法。</li>
</ul>
</li>
</ul>


<hr />

<p>以上舉了三個例子來說明，有時候覺得某些設計的的堅持或許是太鑽牛角尖，也或許是過度設計了，
如果大家有什麼想法或建議，歡迎一起提出來討論！</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[不要相信retainCount，事實上你該怎麼做？]]></title>
    <link href="http://bcswlmpke.github.com/blog/2012/02/03/objective-c-memory-management/"/>
    <updated>2012-02-03T21:29:00+08:00</updated>
    <id>http://bcswlmpke.github.com/blog/2012/02/03/objective-c-memory-management</id>
    <content type="html"><![CDATA[<p>在還沒有擁抱 iOS 5 ARC (Automatic Reference Counting) 之前，
我們必須自己管理程式所使用的記憶體，
在開發 iOS 的過程中踩過不少地雷，
整理出一些心得用來提醒自己，
如果有錯誤也請大家幫忙指正或留言一起討論！</p>

<ul>
<li><strong>產生物件者，記得做對應的 release</strong>

<ul>
<li>new (alloc + init)</li>
<li>retain</li>
<li>copy</li>
</ul>
</li>
<li><strong>addSubView 會將 retainCount +1，有兩種處理的時機</strong></li>
</ul>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'><span class="n">UILabel</span> <span class="o">*</span><span class="n">label</span> <span class="o">=</span> <span class="p">[</span><span class="n">UILabel</span> <span class="n">alloc</span><span class="p">]</span> <span class="nl">initWithFrame:</span><span class="n">self</span><span class="p">.</span><span class="n">bounds</span><span class="p">];</span>
</span><span class='line'><span class="p">[</span><span class="n">self</span> <span class="nl">addSubView:</span><span class="n">label</span><span class="p">];</span>
</span><span class='line'><span class="p">[</span><span class="n">label</span> <span class="n">release</span><span class="p">];</span>
</span></code></pre></td></tr></table></div></figure>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'><span class="k">@implementation</span> <span class="nc">MyClass</span>
</span><span class='line'>    <span class="o">-</span> <span class="p">(</span><span class="kt">void</span><span class="p">)</span><span class="n">dealloc</span>
</span><span class='line'>    <span class="p">{</span>
</span><span class='line'>        <span class="k">if</span> <span class="p">(</span><span class="n">label</span> <span class="o">!=</span> <span class="nb">nil</span><span class="p">)</span>
</span><span class='line'>        <span class="p">{</span>
</span><span class='line'>            <span class="k">if</span> <span class="p">(</span><span class="n">label</span><span class="p">.</span><span class="n">superview</span> <span class="o">!=</span> <span class="nb">nil</span><span class="p">)</span>
</span><span class='line'>                <span class="p">[</span><span class="n">label</span> <span class="n">removeFromSuperview</span><span class="p">];</span>
</span><span class='line'>            <span class="p">[</span><span class="n">label</span> <span class="n">release</span><span class="p">];</span>
</span><span class='line'>            <span class="n">label</span> <span class="o">=</span> <span class="nb">nil</span><span class="p">;</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>        <span class="p">[</span><span class="n">super</span> <span class="n">dealloc</span><span class="p">];</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="k">@end</span>
</span></code></pre></td></tr></table></div></figure>


<ul>
<li><strong>Layer 的 Animation 或 setFrame 會暫時的增加 retainCount，直到動作完成</strong></li>
<li><strong>如果你要使用 Thread，請記得用 Autorelease Pool 幫 Thread 做記憶體管理</strong></li>
<li><strong>如果實作的類別要用 Delegate 時，Property 請記得用 assgin，如果用 retain 會造成 Circular Reference</strong></li>
</ul>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'><span class="k">@interface</span> <span class="nc">MyClass</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>  <span class="kt">id</span> <span class="n">target</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'><span class="k">@property</span> <span class="p">(</span><span class="n">nonatomic</span><span class="p">,</span> <span class="n">assgin</span><span class="p">)</span> <span class="kt">id</span> <span class="n">target</span><span class="p">;</span>
</span><span class='line'><span class="k">@end</span>
</span></code></pre></td></tr></table></div></figure>


<ul>
<li><strong>如果 Property 的屬性使用 retain，要記得 release 並設成 nil</strong></li>
</ul>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'><span class="k">@interface</span> <span class="nc">MyClass</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>  <span class="n">NSString</span> <span class="o">*</span><span class="n">name</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'><span class="k">@property</span> <span class="p">(</span><span class="n">nonatomic</span><span class="p">,</span> <span class="n">retain</span><span class="p">)</span> <span class="n">NSString</span> <span class="o">*</span><span class="n">name</span><span class="p">;</span>
</span><span class='line'><span class="k">@end</span>
</span><span class='line'><span class="k">@implementation</span> <span class="nc">MyClass</span>
</span><span class='line'><span class="o">-</span> <span class="p">(</span><span class="kt">void</span><span class="p">)</span><span class="n">dealloc</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>  <span class="n">self</span><span class="p">.</span><span class="n">name</span> <span class="o">=</span> <span class="nb">nil</span><span class="p">;</span> <span class="c1">// 等同於 [name release]; name = nil;</span>
</span><span class='line'>
</span><span class='line'>  <span class="p">[</span><span class="n">super</span> <span class="n">dealloc</span><span class="p">];</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'><span class="k">@end</span>
</span></code></pre></td></tr></table></div></figure>


<blockquote><p>更詳細的說明可以參考官方文件：<a href="https://developer.apple.com/library/mac/#documentation/Cocoa/Conceptual/MemoryMgmt/Articles/MemoryMgmt.html" title="About Memory Management">About Memory Management</a></p></blockquote>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[About Objective-C Declared Properties Feature]]></title>
    <link href="http://bcswlmpke.github.com/blog/2012/02/01/objective-c-declared-properties-feature/"/>
    <updated>2012-02-01T21:54:00+08:00</updated>
    <id>http://bcswlmpke.github.com/blog/2012/02/01/objective-c-declared-properties-feature</id>
    <content type="html"><![CDATA[<p>剛開始接觸 iOS 應用程式開發時，
曾經對 @synthesize window = _window 所表達的意義有疑問，
查過資料卻沒記下來，
今天剛好同事問到，
所以這次一定要做一下筆記。</p>

<ul>
<li><strong>Property Declaratoin</strong></li>
</ul>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'>  <span class="k">@property</span> <span class="p">(</span><span class="n">attributes</span><span class="p">)</span> <span class="n">type</span> <span class="n">name</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">@interface</span> <span class="nc">MyClass</span> : <span class="nc">NSObject</span>
</span><span class='line'>  <span class="k">@property</span> <span class="kt">float</span> <span class="n">value</span><span class="p">;</span>
</span><span class='line'>  <span class="k">@end</span>
</span></code></pre></td></tr></table></div></figure>


<p>@property float value; 相等於</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'>  <span class="o">-</span> <span class="p">(</span><span class="kt">float</span><span class="p">)</span><span class="n">value</span><span class="p">;</span>
</span><span class='line'>  <span class="o">-</span> <span class="p">(</span><span class="kt">void</span><span class="p">)</span><span class="nl">setValue:</span><span class="p">(</span><span class="kt">float</span><span class="p">)</span><span class="n">newValue</span><span class="p">;</span>
</span></code></pre></td></tr></table></div></figure>


<p>而 property 的宣告也可以放在 class extensions (也就是 anonymous categories)</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'>  <span class="k">@interface</span> <span class="nc">MyClass</span> : <span class="nc">NSObject</span>
</span><span class='line'>  <span class="k">@property</span> <span class="p">(</span><span class="n">retain</span><span class="p">,</span> <span class="n">readonly</span><span class="p">)</span> <span class="kt">float</span> <span class="n">value</span><span class="p">;</span>
</span><span class='line'>  <span class="k">@end</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">@interface</span> <span class="nc">MyClass</span><span class="p">()</span> <span class="c1">// Private extension</span>
</span><span class='line'>  <span class="k">@property</span> <span class="p">(</span><span class="n">retain</span><span class="p">,</span> <span class="n">readwrite</span><span class="p">)</span> <span class="kt">float</span> <span class="n">value</span><span class="p">;</span>
</span><span class='line'>  <span class="k">@end</span>
</span></code></pre></td></tr></table></div></figure>


<ul>
<li><strong>Property Declaratoin Attributes</strong></li>
</ul>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'>  <span class="k">@property</span> <span class="p">(</span><span class="n">attribute</span><span class="p">,</span> <span class="p">[,</span> <span class="n">attribute2</span><span class="p">,</span> <span class="p">...])</span>
</span></code></pre></td></tr></table></div></figure>


<ul>
<li><strong>Accessor Method Names</strong></li>
</ul>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'>  <span class="n">getter</span><span class="o">=</span><span class="n">getterName</span>
</span><span class='line'>  <span class="n">setter</span><span class="o">=</span><span class="n">setterName</span>
</span></code></pre></td></tr></table></div></figure>


<ul>
<li><strong>Writability</strong>

<ul>
<li>readwrite</li>
<li>readonly</li>
</ul>
</li>
<li><strong>Setter Semantics</strong>

<ul>
<li>strong</li>
<li>weak (OS X v10.6 and iOS 4 not support)</li>
<li>copy</li>
<li>assign (Default)</li>
<li>retain</li>
</ul>
</li>
<li><strong>Atomicity</strong>

<ul>
<li>nonatomic</li>
<li>atomic (Default)</li>
</ul>
</li>
<li><strong>Property Implementation Directives</strong></li>
</ul>


<p>用 property=ivar 可以指定特別的 instance variable 來讓 property 使用。
不指定的情況如下，@synthesize value; 其實等同於 @synthesize value = value;</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'>  <span class="k">@interface</span> <span class="nc">MyClass</span> : <span class="nc">NSObject</span>
</span><span class='line'>  <span class="k">@property</span> <span class="p">(</span><span class="n">copy</span><span class="p">,</span> <span class="n">readwrite</span><span class="p">)</span> <span class="n">NSString</span> <span class="o">*</span><span class="n">value</span><span class="p">;</span>
</span><span class='line'>  <span class="k">@end</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">@implementation</span> <span class="nc">MyClass</span>
</span><span class='line'>  <span class="k">@synthesize</span> <span class="n">value</span><span class="p">;</span>
</span><span class='line'>  <span class="k">@end</span>
</span></code></pre></td></tr></table></div></figure>


<p>有指定的情況如下：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'>  <span class="k">@implementation</span> <span class="nc">MyClass</span>
</span><span class='line'>  <span class="k">@synthesize</span> <span class="n">firstName</span><span class="p">,</span> <span class="n">lastName</span><span class="p">,</span> <span class="n">age</span><span class="o">=</span><span class="n">yearsOld</span><span class="p">;</span>
</span><span class='line'>  <span class="k">@end</span>
</span></code></pre></td></tr></table></div></figure>


<p>age 是用 yearsOld 這個 instance variable 來表示。
所以在 MyClass 內部使用時，可以用 yearsOld 來進行操作，
而其它類別如果使用 MyClass，則可以用 age 這個 property 來進行操作。</p>

<blockquote><p>如果要看更詳細的說明，可以參考官方文件<a href="http://developer.apple.com/library/mac/#documentation/Cocoa/Conceptual/ObjectiveC/Chapters/ocProperties.html" title="ocProperties">Declared Properties</a></p></blockquote>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[我的工具箱]]></title>
    <link href="http://bcswlmpke.github.com/blog/2012/01/30/my-toolbox/"/>
    <updated>2012-01-30T22:33:00+08:00</updated>
    <id>http://bcswlmpke.github.com/blog/2012/01/30/my-toolbox</id>
    <content type="html"><![CDATA[<p>最近看到<a href="http://blog.eddie.com.tw/2012/01/04/my-toolbox/" title="高見龍的工具箱">高見龍的工具箱</a>與<a href="http://blog.gasolin.idv.tw/2012/01/blog-post.html?m=1" title="Gasolin的工具箱">Gasolin的工具箱</a>，
於是自己也興起了念頭，整理一下目前自己常用的工具。</p>

<hr />

<ul>
<li><strong>實體工具</strong>

<ul>
<li>Mac Book Pro 13&#8221;</li>
<li>Samsung i9000</li>
</ul>
</li>
<li><strong>我的 MBP 不可缺少的軟體</strong>

<ul>
<li>TotalFinder</li>
<li>Google Chrome

<ul>
<li>Plugins

<ul>
<li>Xmarks</li>
<li>Google Dictionary</li>
<li>VerticalTabs</li>
</ul>
</li>
</ul>
</li>
<li>Adium</li>
<li>Skype</li>
<li>Dropbox</li>
<li>iTerm2</li>
<li>MPlayerX</li>
<li>MacVim

<ul>
<li><a href="https://github.com/bcswlmpke/bcswlmpke-vim" title="Hank's vimrc">我常用的vim plugins</a></li>
</ul>
</li>
<li>Eclipse</li>
<li>XCode</li>
<li>Alfred</li>
<li>無蝦米</li>
</ul>
</li>
<li><strong>我的 i9000 不可缺少的軟體</strong>

<ul>
<li>ES 檔案瀏覽器</li>
<li>Fancy Widget</li>
<li>Quick Settings</li>
<li>Advanced Task Killer</li>
<li>條碼掃描器</li>
<li>RealCalc</li>
<li>SwiFTP</li>
<li>快圖瀏覽</li>
<li>Fast Image View</li>
<li>Adobe Reader</li>
<li>Camera360</li>
<li>Google+</li>
<li>Facebook</li>
<li>噗浪肉骨獸</li>
<li>LINE</li>
<li>海豚瀏覽器</li>
<li>MoboPlayer</li>
</ul>
</li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[管理Vim plugins]]></title>
    <link href="http://bcswlmpke.github.com/blog/2012/01/17/vim-setup/"/>
    <updated>2012-01-17T00:19:00+08:00</updated>
    <id>http://bcswlmpke.github.com/blog/2012/01/17/vim-setup</id>
    <content type="html"><![CDATA[<ul>
<li>產生Vim工作目錄

<pre><code>- mkdir bcswlmpke-vim
- cd bcswlmpke-vim
- git init
- touch README
- git add README
- git commit -m 'first commit'
- git remote add origin git@github.com:bcswlmpke/bcswlmpke-vim.git
- git push -u origin master
</code></pre></li>
<li>用 pathogen 來管理 Vim plugin

<ul>
<li>每個 plugin 都獨立安裝在 ~/.vim/bundle 下</li>
<li>每個 plugin 都以 git submodule 的方式來管理，請參考<a href="http://vimcasts.org/episodes/synchronizing-plugins-with-git-submodules-and-pathogen" title="Git submodules and pathogen">Git Submodules and pathogen</a>

<ul>
<li>cd bcswlmpke-vim</li>
<li>touch vimrc</li>
<li>touch gvimrc</li>
<li>ln -s ~/bcswlmpke-vim/vimrc ~/.vimrc</li>
<li>ln -s ~/bcswlmpke-vim/gvimrc ~/.gvimrc</li>
<li>ln -s ~/bcswlmpke-vim ~/.vim</li>
<li>安裝 pathogen，下載 pathogen.vim 放到 .vim/autoload</li>
<li>Activate pathogen, 需要在 .vimrc 加入下列兩行：

<ul>
<li>call pathogen#runtime_append_all_bundles()</li>
<li>call pathogen#helptags()</li>
</ul>
</li>
</ul>
</li>
</ul>
</li>
<li>以 Submodule 的方式安裝 plugins

<pre><code>- cd bcswlmpke-vim
- mkdir bundle
- git submodule add https://github.com/fholgado/minibufexpl.vim.git bundle/minibufexpl.vim
</code></pre></li>
<li>安裝 Vim configuraton 到其它電腦

<pre><code>- cd ~
- git clone http://github.com/username/dotvim.git ~/.vim
- ln -s ~/.vim/vimrc ~/.vimrc
- ln -s ~/.vim/gvimrc ~/.gvimrc
- cd ~/.vim
- git submodule init
- git submodule update
</code></pre></li>
<li>升級 plugin bundle

<pre><code>- cd minibufexpl.vim
- git pull origin master
</code></pre></li>
<li>升級所有的 bundled plugins

<pre><code>- git submodule foreach git pull origin master
</code></pre></li>
<li>移除 Submodule

<ul>
<li>砍掉目錄

<ul>
<li>git rm &#8211;cached [要移除的目錄]</li>
<li>rm -rf [要移除的目錄]</li>
</ul>
</li>
<li>修改 .gitmodules

<ul>
<li>將相關內容移除</li>
</ul>
</li>
<li>Commit

<ul>
<li>git add .gitmodules</li>
<li>git commit -m &#8220;Remove submodule xxx&#8221;</li>
</ul>
</li>
<li>Sync

<ul>
<li>git submodule sync</li>
</ul>
</li>
</ul>
</li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Octopress的目錄結構]]></title>
    <link href="http://bcswlmpke.github.com/blog/2012/01/14/octopress-directory-structure/"/>
    <updated>2012-01-14T00:21:00+08:00</updated>
    <id>http://bcswlmpke.github.com/blog/2012/01/14/octopress-directory-structure</id>
    <content type="html"><![CDATA[<ul>
<li>octopress/

<ul>
<li>_config.yml 可以做基本設定修改</li>
</ul>
</li>
<li>octopress/plugins

<ul>
<li>放置外掛程式</li>
</ul>
</li>
<li>octopress/source/_posts

<ul>
<li>放置你寫的文章</li>
</ul>
</li>
<li>octopress/source/_includes/asides

<ul>
<li>修改_config.yml -> rake generate 會在這邊產生html檔案</li>
</ul>
</li>
<li>octopress/source/new_page

<ul>
<li>rake new_page[&#8216;new page&#8217;]</li>
</ul>
</li>
<li>octopress/source/_includes/custom/navigation.html

<ul>
<li>修改或加入link</li>
</ul>
</li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[How to use Octopress]]></title>
    <link href="http://bcswlmpke.github.com/blog/2012/01/12/octopress-note/"/>
    <updated>2012-01-12T21:53:00+08:00</updated>
    <id>http://bcswlmpke.github.com/blog/2012/01/12/octopress-note</id>
    <content type="html"><![CDATA[<ul>
<li>安裝

<ul>
<li>請參考<a href="http://octopress.org/docs/setup/" title="Octopress Setup">Octopress官網</a></li>
<li>設定Octopress請參考<a href="http://octopress.org/docs/configuring/" title="Configuring Octopress">Configuring Octopress</a></li>
</ul>
</li>
<li>用 Markdown 寫文章

<ul>
<li>rake new_post[文章名稱]</li>
<li>請參考<a href="http://markdown.tw" title="Markdown Syntax">Markdown中文文件</a></li>
<li>rake generate -> rake preview -> 然後<a href="http://127.0.0.1:4000/">這裡</a>可以看到預覽畫面</li>
</ul>
</li>
<li>發佈

<ul>
<li>git checkout source</li>
<li>git push origin source</li>
<li>rake generate</li>
<li>rake deploy</li>
</ul>
</li>
</ul>

]]></content>
  </entry>
  
</feed>
